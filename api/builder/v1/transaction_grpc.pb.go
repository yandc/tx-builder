// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: builder/v1/transaction.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Transaction_CreateRecordFromWallet_FullMethodName      = "/api.transaction.v1.Transaction/CreateRecordFromWallet"
	Transaction_GetTransactionByHash_FullMethodName        = "/api.transaction.v1.Transaction/GetTransactionByHash"
	Transaction_PageLists_FullMethodName                   = "/api.transaction.v1.Transaction/PageLists"
	Transaction_PageList_FullMethodName                    = "/api.transaction.v1.Transaction/PageList"
	Transaction_GetAmount_FullMethodName                   = "/api.transaction.v1.Transaction/GetAmount"
	Transaction_GetDappList_FullMethodName                 = "/api.transaction.v1.Transaction/GetDappList"
	Transaction_GetAllOpenAmount_FullMethodName            = "/api.transaction.v1.Transaction/GetAllOpenAmount"
	Transaction_GetNonce_FullMethodName                    = "/api.transaction.v1.Transaction/GetNonce"
	Transaction_GetDappListPageList_FullMethodName         = "/api.transaction.v1.Transaction/GetDappListPageList"
	Transaction_PageListAssetCurrency_FullMethodName       = "/api.transaction.v1.Transaction/PageListAssetCurrency"
	Transaction_PageListAsset_FullMethodName               = "/api.transaction.v1.Transaction/PageListAsset"
	Transaction_PageListAssetGroup_FullMethodName          = "/api.transaction.v1.Transaction/PageListAssetGroup"
	Transaction_ClientPageListAsset_FullMethodName         = "/api.transaction.v1.Transaction/ClientPageListAsset"
	Transaction_GetBalance_FullMethodName                  = "/api.transaction.v1.Transaction/GetBalance"
	Transaction_ListAmountUidDimension_FullMethodName      = "/api.transaction.v1.Transaction/ListAmountUidDimension"
	Transaction_ListHasBalanceUidDimension_FullMethodName  = "/api.transaction.v1.Transaction/ListHasBalanceUidDimension"
	Transaction_ListHasBalanceDimension_FullMethodName     = "/api.transaction.v1.Transaction/ListHasBalanceDimension"
	Transaction_AssetHistoryFundAmount_FullMethodName      = "/api.transaction.v1.Transaction/AssetHistoryFundAmount"
	Transaction_AssetHistoryAddressAmount_FullMethodName   = "/api.transaction.v1.Transaction/AssetHistoryAddressAmount"
	Transaction_ClientPageListNftAssetGroup_FullMethodName = "/api.transaction.v1.Transaction/ClientPageListNftAssetGroup"
	Transaction_ClientPageListNftAsset_FullMethodName      = "/api.transaction.v1.Transaction/ClientPageListNftAsset"
	Transaction_GetNftBalance_FullMethodName               = "/api.transaction.v1.Transaction/GetNftBalance"
	Transaction_PageListStatistic_FullMethodName           = "/api.transaction.v1.Transaction/PageListStatistic"
	Transaction_StatisticFundAmount_FullMethodName         = "/api.transaction.v1.Transaction/StatisticFundAmount"
	Transaction_StatisticFundRate_FullMethodName           = "/api.transaction.v1.Transaction/StatisticFundRate"
	Transaction_GetUnspentTx_FullMethodName                = "/api.transaction.v1.Transaction/GetUnspentTx"
	Transaction_GetNftRecord_FullMethodName                = "/api.transaction.v1.Transaction/GetNftRecord"
	Transaction_JsonRpc_FullMethodName                     = "/api.transaction.v1.Transaction/JsonRpc"
	Transaction_KanbanSummary_FullMethodName               = "/api.transaction.v1.Transaction/KanbanSummary"
	Transaction_KanbanTxChart_FullMethodName               = "/api.transaction.v1.Transaction/KanbanTxChart"
	Transaction_KanbanContractChart_FullMethodName         = "/api.transaction.v1.Transaction/KanbanContractChart"
	Transaction_GetBlockHeight_FullMethodName              = "/api.transaction.v1.Transaction/GetBlockHeight"
)

// TransactionClient is the client API for Transaction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionClient interface {
	CreateRecordFromWallet(ctx context.Context, in *TransactionReq, opts ...grpc.CallOption) (*CreateResponse, error)
	// 根据hash查询交易记录
	GetTransactionByHash(ctx context.Context, in *GetTransactionByHashRequest, opts ...grpc.CallOption) (*TransactionRecord, error)
	// 分页查询交易记录列表
	PageLists(ctx context.Context, in *PageListRequest, opts ...grpc.CallOption) (*PageListResponse, error)
	// 分页查询交易记录列表(原交易、加速和取消的会折叠处理)
	PageList(ctx context.Context, in *PageListRequest, opts ...grpc.CallOption) (*PageListResponse, error)
	// 查询pending状态的总金额
	GetAmount(ctx context.Context, in *AmountRequest, opts ...grpc.CallOption) (*AmountResponse, error)
	GetDappList(ctx context.Context, in *DappListReq, opts ...grpc.CallOption) (*DappListResp, error)
	GetAllOpenAmount(ctx context.Context, in *OpenAmountReq, opts ...grpc.CallOption) (*OpenAmoutResp, error)
	GetNonce(ctx context.Context, in *NonceReq, opts ...grpc.CallOption) (*NonceResp, error)
	GetDappListPageList(ctx context.Context, in *DappPageListReq, opts ...grpc.CallOption) (*DappPageListResp, error)
	// 分页查询包含折合成法币的用户资产列表
	PageListAssetCurrency(ctx context.Context, in *PageListAssetRequest, opts ...grpc.CallOption) (*PageListAssetResponse, error)
	// 管理平台分页查询用户资产列表
	PageListAsset(ctx context.Context, in *PageListAssetRequest, opts ...grpc.CallOption) (*PageListAssetResponse, error)
	// 管理平台分页查询用户资产分组列表
	PageListAssetGroup(ctx context.Context, in *PageListAssetRequest, opts ...grpc.CallOption) (*PageListAssetResponse, error)
	// 客户端分页查询用户资产列表
	ClientPageListAsset(ctx context.Context, in *PageListAssetRequest, opts ...grpc.CallOption) (*PageListAssetResponse, error)
	// 查询用户余额
	GetBalance(ctx context.Context, in *AssetRequest, opts ...grpc.CallOption) (*ListBalanceResponse, error)
	// 根据uid维度查询用户金额列表
	ListAmountUidDimension(ctx context.Context, in *ListAmountUidDimensionRequest, opts ...grpc.CallOption) (*ListAmountUidDimensionResponse, error)
	// 根据uid维度查询用户是否有余额列表
	ListHasBalanceUidDimension(ctx context.Context, in *ListHasBalanceUidDimensionRequest, opts ...grpc.CallOption) (*ListHasBalanceUidDimensionResponse, error)
	// 根据指定维度查询用户是否有余额列表
	ListHasBalanceDimension(ctx context.Context, in *ListHasBalanceDimensionRequest, opts ...grpc.CallOption) (*ListHasBalanceDimensionResponse, error)
	// 交易数据看板查询资沉量趋势图
	AssetHistoryFundAmount(ctx context.Context, in *AssetHistoryRequest, opts ...grpc.CallOption) (*AssetHistoryFundAmountListResponse, error)
	// 交易数据看板查询钱包地址数趋势图
	AssetHistoryAddressAmount(ctx context.Context, in *AssetHistoryRequest, opts ...grpc.CallOption) (*AssetHistoryAddressAmountListResponse, error)
	// 客户端分页查询用户NFT资产分组列表
	ClientPageListNftAssetGroup(ctx context.Context, in *PageListNftAssetRequest, opts ...grpc.CallOption) (*ClientPageListNftAssetGroupResponse, error)
	// 客户端分页查询用户NFT资产列表
	ClientPageListNftAsset(ctx context.Context, in *PageListNftAssetRequest, opts ...grpc.CallOption) (*ClientPageListNftAssetResponse, error)
	// 查询用户NFT余额
	GetNftBalance(ctx context.Context, in *NftAssetRequest, opts ...grpc.CallOption) (*NftBalanceResponse, error)
	// 管理平台分页查询交易数据统计列表
	PageListStatistic(ctx context.Context, in *PageListStatisticRequest, opts ...grpc.CallOption) (*PageListStatisticResponse, error)
	// 管理平台交易数据看板查询金额趋势图
	StatisticFundAmount(ctx context.Context, in *StatisticFundRequest, opts ...grpc.CallOption) (*FundAmountListResponse, error)
	// 管理平台交易数据看板查询金额占比图
	StatisticFundRate(ctx context.Context, in *StatisticFundRequest, opts ...grpc.CallOption) (*FundRateListResponse, error)
	// 未花费资产查询
	GetUnspentTx(ctx context.Context, in *UnspentReq, opts ...grpc.CallOption) (*UnspentResponse, error)
	// 后去nft流转记录
	GetNftRecord(ctx context.Context, in *NftRecordReq, opts ...grpc.CallOption) (*NftRecordResponse, error)
	// 通用 接口定义
	JsonRpc(ctx context.Context, in *JsonReq, opts ...grpc.CallOption) (*JsonResponse, error)
	// 看板数据汇总
	KanbanSummary(ctx context.Context, in *KanbanSummaryRequest, opts ...grpc.CallOption) (*KanbanSummaryResponse, error)
	// 看板交易数据
	KanbanTxChart(ctx context.Context, in *KanbanChartRequest, opts ...grpc.CallOption) (*KanbanChartResponse, error)
	// 看板合约数据
	KanbanContractChart(ctx context.Context, in *KanbanChartRequest, opts ...grpc.CallOption) (*KanbanChartResponse, error)
	// 获取块高
	GetBlockHeight(ctx context.Context, in *GetBlockHeightReq, opts ...grpc.CallOption) (*GetBlockHeightResponse, error)
}

type transactionClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionClient(cc grpc.ClientConnInterface) TransactionClient {
	return &transactionClient{cc}
}

func (c *transactionClient) CreateRecordFromWallet(ctx context.Context, in *TransactionReq, opts ...grpc.CallOption) (*CreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, Transaction_CreateRecordFromWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) GetTransactionByHash(ctx context.Context, in *GetTransactionByHashRequest, opts ...grpc.CallOption) (*TransactionRecord, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionRecord)
	err := c.cc.Invoke(ctx, Transaction_GetTransactionByHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) PageLists(ctx context.Context, in *PageListRequest, opts ...grpc.CallOption) (*PageListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PageListResponse)
	err := c.cc.Invoke(ctx, Transaction_PageLists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) PageList(ctx context.Context, in *PageListRequest, opts ...grpc.CallOption) (*PageListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PageListResponse)
	err := c.cc.Invoke(ctx, Transaction_PageList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) GetAmount(ctx context.Context, in *AmountRequest, opts ...grpc.CallOption) (*AmountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AmountResponse)
	err := c.cc.Invoke(ctx, Transaction_GetAmount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) GetDappList(ctx context.Context, in *DappListReq, opts ...grpc.CallOption) (*DappListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DappListResp)
	err := c.cc.Invoke(ctx, Transaction_GetDappList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) GetAllOpenAmount(ctx context.Context, in *OpenAmountReq, opts ...grpc.CallOption) (*OpenAmoutResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OpenAmoutResp)
	err := c.cc.Invoke(ctx, Transaction_GetAllOpenAmount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) GetNonce(ctx context.Context, in *NonceReq, opts ...grpc.CallOption) (*NonceResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NonceResp)
	err := c.cc.Invoke(ctx, Transaction_GetNonce_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) GetDappListPageList(ctx context.Context, in *DappPageListReq, opts ...grpc.CallOption) (*DappPageListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DappPageListResp)
	err := c.cc.Invoke(ctx, Transaction_GetDappListPageList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) PageListAssetCurrency(ctx context.Context, in *PageListAssetRequest, opts ...grpc.CallOption) (*PageListAssetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PageListAssetResponse)
	err := c.cc.Invoke(ctx, Transaction_PageListAssetCurrency_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) PageListAsset(ctx context.Context, in *PageListAssetRequest, opts ...grpc.CallOption) (*PageListAssetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PageListAssetResponse)
	err := c.cc.Invoke(ctx, Transaction_PageListAsset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) PageListAssetGroup(ctx context.Context, in *PageListAssetRequest, opts ...grpc.CallOption) (*PageListAssetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PageListAssetResponse)
	err := c.cc.Invoke(ctx, Transaction_PageListAssetGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) ClientPageListAsset(ctx context.Context, in *PageListAssetRequest, opts ...grpc.CallOption) (*PageListAssetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PageListAssetResponse)
	err := c.cc.Invoke(ctx, Transaction_ClientPageListAsset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) GetBalance(ctx context.Context, in *AssetRequest, opts ...grpc.CallOption) (*ListBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBalanceResponse)
	err := c.cc.Invoke(ctx, Transaction_GetBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) ListAmountUidDimension(ctx context.Context, in *ListAmountUidDimensionRequest, opts ...grpc.CallOption) (*ListAmountUidDimensionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAmountUidDimensionResponse)
	err := c.cc.Invoke(ctx, Transaction_ListAmountUidDimension_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) ListHasBalanceUidDimension(ctx context.Context, in *ListHasBalanceUidDimensionRequest, opts ...grpc.CallOption) (*ListHasBalanceUidDimensionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHasBalanceUidDimensionResponse)
	err := c.cc.Invoke(ctx, Transaction_ListHasBalanceUidDimension_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) ListHasBalanceDimension(ctx context.Context, in *ListHasBalanceDimensionRequest, opts ...grpc.CallOption) (*ListHasBalanceDimensionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHasBalanceDimensionResponse)
	err := c.cc.Invoke(ctx, Transaction_ListHasBalanceDimension_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) AssetHistoryFundAmount(ctx context.Context, in *AssetHistoryRequest, opts ...grpc.CallOption) (*AssetHistoryFundAmountListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssetHistoryFundAmountListResponse)
	err := c.cc.Invoke(ctx, Transaction_AssetHistoryFundAmount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) AssetHistoryAddressAmount(ctx context.Context, in *AssetHistoryRequest, opts ...grpc.CallOption) (*AssetHistoryAddressAmountListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssetHistoryAddressAmountListResponse)
	err := c.cc.Invoke(ctx, Transaction_AssetHistoryAddressAmount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) ClientPageListNftAssetGroup(ctx context.Context, in *PageListNftAssetRequest, opts ...grpc.CallOption) (*ClientPageListNftAssetGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientPageListNftAssetGroupResponse)
	err := c.cc.Invoke(ctx, Transaction_ClientPageListNftAssetGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) ClientPageListNftAsset(ctx context.Context, in *PageListNftAssetRequest, opts ...grpc.CallOption) (*ClientPageListNftAssetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientPageListNftAssetResponse)
	err := c.cc.Invoke(ctx, Transaction_ClientPageListNftAsset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) GetNftBalance(ctx context.Context, in *NftAssetRequest, opts ...grpc.CallOption) (*NftBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NftBalanceResponse)
	err := c.cc.Invoke(ctx, Transaction_GetNftBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) PageListStatistic(ctx context.Context, in *PageListStatisticRequest, opts ...grpc.CallOption) (*PageListStatisticResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PageListStatisticResponse)
	err := c.cc.Invoke(ctx, Transaction_PageListStatistic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) StatisticFundAmount(ctx context.Context, in *StatisticFundRequest, opts ...grpc.CallOption) (*FundAmountListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FundAmountListResponse)
	err := c.cc.Invoke(ctx, Transaction_StatisticFundAmount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) StatisticFundRate(ctx context.Context, in *StatisticFundRequest, opts ...grpc.CallOption) (*FundRateListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FundRateListResponse)
	err := c.cc.Invoke(ctx, Transaction_StatisticFundRate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) GetUnspentTx(ctx context.Context, in *UnspentReq, opts ...grpc.CallOption) (*UnspentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnspentResponse)
	err := c.cc.Invoke(ctx, Transaction_GetUnspentTx_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) GetNftRecord(ctx context.Context, in *NftRecordReq, opts ...grpc.CallOption) (*NftRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NftRecordResponse)
	err := c.cc.Invoke(ctx, Transaction_GetNftRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) JsonRpc(ctx context.Context, in *JsonReq, opts ...grpc.CallOption) (*JsonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JsonResponse)
	err := c.cc.Invoke(ctx, Transaction_JsonRpc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) KanbanSummary(ctx context.Context, in *KanbanSummaryRequest, opts ...grpc.CallOption) (*KanbanSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KanbanSummaryResponse)
	err := c.cc.Invoke(ctx, Transaction_KanbanSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) KanbanTxChart(ctx context.Context, in *KanbanChartRequest, opts ...grpc.CallOption) (*KanbanChartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KanbanChartResponse)
	err := c.cc.Invoke(ctx, Transaction_KanbanTxChart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) KanbanContractChart(ctx context.Context, in *KanbanChartRequest, opts ...grpc.CallOption) (*KanbanChartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KanbanChartResponse)
	err := c.cc.Invoke(ctx, Transaction_KanbanContractChart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) GetBlockHeight(ctx context.Context, in *GetBlockHeightReq, opts ...grpc.CallOption) (*GetBlockHeightResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBlockHeightResponse)
	err := c.cc.Invoke(ctx, Transaction_GetBlockHeight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionServer is the server API for Transaction service.
// All implementations must embed UnimplementedTransactionServer
// for forward compatibility.
type TransactionServer interface {
	CreateRecordFromWallet(context.Context, *TransactionReq) (*CreateResponse, error)
	// 根据hash查询交易记录
	GetTransactionByHash(context.Context, *GetTransactionByHashRequest) (*TransactionRecord, error)
	// 分页查询交易记录列表
	PageLists(context.Context, *PageListRequest) (*PageListResponse, error)
	// 分页查询交易记录列表(原交易、加速和取消的会折叠处理)
	PageList(context.Context, *PageListRequest) (*PageListResponse, error)
	// 查询pending状态的总金额
	GetAmount(context.Context, *AmountRequest) (*AmountResponse, error)
	GetDappList(context.Context, *DappListReq) (*DappListResp, error)
	GetAllOpenAmount(context.Context, *OpenAmountReq) (*OpenAmoutResp, error)
	GetNonce(context.Context, *NonceReq) (*NonceResp, error)
	GetDappListPageList(context.Context, *DappPageListReq) (*DappPageListResp, error)
	// 分页查询包含折合成法币的用户资产列表
	PageListAssetCurrency(context.Context, *PageListAssetRequest) (*PageListAssetResponse, error)
	// 管理平台分页查询用户资产列表
	PageListAsset(context.Context, *PageListAssetRequest) (*PageListAssetResponse, error)
	// 管理平台分页查询用户资产分组列表
	PageListAssetGroup(context.Context, *PageListAssetRequest) (*PageListAssetResponse, error)
	// 客户端分页查询用户资产列表
	ClientPageListAsset(context.Context, *PageListAssetRequest) (*PageListAssetResponse, error)
	// 查询用户余额
	GetBalance(context.Context, *AssetRequest) (*ListBalanceResponse, error)
	// 根据uid维度查询用户金额列表
	ListAmountUidDimension(context.Context, *ListAmountUidDimensionRequest) (*ListAmountUidDimensionResponse, error)
	// 根据uid维度查询用户是否有余额列表
	ListHasBalanceUidDimension(context.Context, *ListHasBalanceUidDimensionRequest) (*ListHasBalanceUidDimensionResponse, error)
	// 根据指定维度查询用户是否有余额列表
	ListHasBalanceDimension(context.Context, *ListHasBalanceDimensionRequest) (*ListHasBalanceDimensionResponse, error)
	// 交易数据看板查询资沉量趋势图
	AssetHistoryFundAmount(context.Context, *AssetHistoryRequest) (*AssetHistoryFundAmountListResponse, error)
	// 交易数据看板查询钱包地址数趋势图
	AssetHistoryAddressAmount(context.Context, *AssetHistoryRequest) (*AssetHistoryAddressAmountListResponse, error)
	// 客户端分页查询用户NFT资产分组列表
	ClientPageListNftAssetGroup(context.Context, *PageListNftAssetRequest) (*ClientPageListNftAssetGroupResponse, error)
	// 客户端分页查询用户NFT资产列表
	ClientPageListNftAsset(context.Context, *PageListNftAssetRequest) (*ClientPageListNftAssetResponse, error)
	// 查询用户NFT余额
	GetNftBalance(context.Context, *NftAssetRequest) (*NftBalanceResponse, error)
	// 管理平台分页查询交易数据统计列表
	PageListStatistic(context.Context, *PageListStatisticRequest) (*PageListStatisticResponse, error)
	// 管理平台交易数据看板查询金额趋势图
	StatisticFundAmount(context.Context, *StatisticFundRequest) (*FundAmountListResponse, error)
	// 管理平台交易数据看板查询金额占比图
	StatisticFundRate(context.Context, *StatisticFundRequest) (*FundRateListResponse, error)
	// 未花费资产查询
	GetUnspentTx(context.Context, *UnspentReq) (*UnspentResponse, error)
	// 后去nft流转记录
	GetNftRecord(context.Context, *NftRecordReq) (*NftRecordResponse, error)
	// 通用 接口定义
	JsonRpc(context.Context, *JsonReq) (*JsonResponse, error)
	// 看板数据汇总
	KanbanSummary(context.Context, *KanbanSummaryRequest) (*KanbanSummaryResponse, error)
	// 看板交易数据
	KanbanTxChart(context.Context, *KanbanChartRequest) (*KanbanChartResponse, error)
	// 看板合约数据
	KanbanContractChart(context.Context, *KanbanChartRequest) (*KanbanChartResponse, error)
	// 获取块高
	GetBlockHeight(context.Context, *GetBlockHeightReq) (*GetBlockHeightResponse, error)
	mustEmbedUnimplementedTransactionServer()
}

// UnimplementedTransactionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransactionServer struct{}

func (UnimplementedTransactionServer) CreateRecordFromWallet(context.Context, *TransactionReq) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecordFromWallet not implemented")
}
func (UnimplementedTransactionServer) GetTransactionByHash(context.Context, *GetTransactionByHashRequest) (*TransactionRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByHash not implemented")
}
func (UnimplementedTransactionServer) PageLists(context.Context, *PageListRequest) (*PageListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageLists not implemented")
}
func (UnimplementedTransactionServer) PageList(context.Context, *PageListRequest) (*PageListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageList not implemented")
}
func (UnimplementedTransactionServer) GetAmount(context.Context, *AmountRequest) (*AmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAmount not implemented")
}
func (UnimplementedTransactionServer) GetDappList(context.Context, *DappListReq) (*DappListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDappList not implemented")
}
func (UnimplementedTransactionServer) GetAllOpenAmount(context.Context, *OpenAmountReq) (*OpenAmoutResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllOpenAmount not implemented")
}
func (UnimplementedTransactionServer) GetNonce(context.Context, *NonceReq) (*NonceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNonce not implemented")
}
func (UnimplementedTransactionServer) GetDappListPageList(context.Context, *DappPageListReq) (*DappPageListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDappListPageList not implemented")
}
func (UnimplementedTransactionServer) PageListAssetCurrency(context.Context, *PageListAssetRequest) (*PageListAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageListAssetCurrency not implemented")
}
func (UnimplementedTransactionServer) PageListAsset(context.Context, *PageListAssetRequest) (*PageListAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageListAsset not implemented")
}
func (UnimplementedTransactionServer) PageListAssetGroup(context.Context, *PageListAssetRequest) (*PageListAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageListAssetGroup not implemented")
}
func (UnimplementedTransactionServer) ClientPageListAsset(context.Context, *PageListAssetRequest) (*PageListAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientPageListAsset not implemented")
}
func (UnimplementedTransactionServer) GetBalance(context.Context, *AssetRequest) (*ListBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedTransactionServer) ListAmountUidDimension(context.Context, *ListAmountUidDimensionRequest) (*ListAmountUidDimensionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAmountUidDimension not implemented")
}
func (UnimplementedTransactionServer) ListHasBalanceUidDimension(context.Context, *ListHasBalanceUidDimensionRequest) (*ListHasBalanceUidDimensionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHasBalanceUidDimension not implemented")
}
func (UnimplementedTransactionServer) ListHasBalanceDimension(context.Context, *ListHasBalanceDimensionRequest) (*ListHasBalanceDimensionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHasBalanceDimension not implemented")
}
func (UnimplementedTransactionServer) AssetHistoryFundAmount(context.Context, *AssetHistoryRequest) (*AssetHistoryFundAmountListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetHistoryFundAmount not implemented")
}
func (UnimplementedTransactionServer) AssetHistoryAddressAmount(context.Context, *AssetHistoryRequest) (*AssetHistoryAddressAmountListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetHistoryAddressAmount not implemented")
}
func (UnimplementedTransactionServer) ClientPageListNftAssetGroup(context.Context, *PageListNftAssetRequest) (*ClientPageListNftAssetGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientPageListNftAssetGroup not implemented")
}
func (UnimplementedTransactionServer) ClientPageListNftAsset(context.Context, *PageListNftAssetRequest) (*ClientPageListNftAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientPageListNftAsset not implemented")
}
func (UnimplementedTransactionServer) GetNftBalance(context.Context, *NftAssetRequest) (*NftBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNftBalance not implemented")
}
func (UnimplementedTransactionServer) PageListStatistic(context.Context, *PageListStatisticRequest) (*PageListStatisticResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageListStatistic not implemented")
}
func (UnimplementedTransactionServer) StatisticFundAmount(context.Context, *StatisticFundRequest) (*FundAmountListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatisticFundAmount not implemented")
}
func (UnimplementedTransactionServer) StatisticFundRate(context.Context, *StatisticFundRequest) (*FundRateListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatisticFundRate not implemented")
}
func (UnimplementedTransactionServer) GetUnspentTx(context.Context, *UnspentReq) (*UnspentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnspentTx not implemented")
}
func (UnimplementedTransactionServer) GetNftRecord(context.Context, *NftRecordReq) (*NftRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNftRecord not implemented")
}
func (UnimplementedTransactionServer) JsonRpc(context.Context, *JsonReq) (*JsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JsonRpc not implemented")
}
func (UnimplementedTransactionServer) KanbanSummary(context.Context, *KanbanSummaryRequest) (*KanbanSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KanbanSummary not implemented")
}
func (UnimplementedTransactionServer) KanbanTxChart(context.Context, *KanbanChartRequest) (*KanbanChartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KanbanTxChart not implemented")
}
func (UnimplementedTransactionServer) KanbanContractChart(context.Context, *KanbanChartRequest) (*KanbanChartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KanbanContractChart not implemented")
}
func (UnimplementedTransactionServer) GetBlockHeight(context.Context, *GetBlockHeightReq) (*GetBlockHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHeight not implemented")
}
func (UnimplementedTransactionServer) mustEmbedUnimplementedTransactionServer() {}
func (UnimplementedTransactionServer) testEmbeddedByValue()                     {}

// UnsafeTransactionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionServer will
// result in compilation errors.
type UnsafeTransactionServer interface {
	mustEmbedUnimplementedTransactionServer()
}

func RegisterTransactionServer(s grpc.ServiceRegistrar, srv TransactionServer) {
	// If the following call pancis, it indicates UnimplementedTransactionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Transaction_ServiceDesc, srv)
}

func _Transaction_CreateRecordFromWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).CreateRecordFromWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_CreateRecordFromWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).CreateRecordFromWallet(ctx, req.(*TransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_GetTransactionByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).GetTransactionByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_GetTransactionByHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).GetTransactionByHash(ctx, req.(*GetTransactionByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_PageLists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).PageLists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_PageLists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).PageLists(ctx, req.(*PageListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_PageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).PageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_PageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).PageList(ctx, req.(*PageListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_GetAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).GetAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_GetAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).GetAmount(ctx, req.(*AmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_GetDappList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DappListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).GetDappList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_GetDappList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).GetDappList(ctx, req.(*DappListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_GetAllOpenAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenAmountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).GetAllOpenAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_GetAllOpenAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).GetAllOpenAmount(ctx, req.(*OpenAmountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_GetNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).GetNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_GetNonce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).GetNonce(ctx, req.(*NonceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_GetDappListPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DappPageListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).GetDappListPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_GetDappListPageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).GetDappListPageList(ctx, req.(*DappPageListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_PageListAssetCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageListAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).PageListAssetCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_PageListAssetCurrency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).PageListAssetCurrency(ctx, req.(*PageListAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_PageListAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageListAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).PageListAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_PageListAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).PageListAsset(ctx, req.(*PageListAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_PageListAssetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageListAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).PageListAssetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_PageListAssetGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).PageListAssetGroup(ctx, req.(*PageListAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_ClientPageListAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageListAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).ClientPageListAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_ClientPageListAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).ClientPageListAsset(ctx, req.(*PageListAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).GetBalance(ctx, req.(*AssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_ListAmountUidDimension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAmountUidDimensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).ListAmountUidDimension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_ListAmountUidDimension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).ListAmountUidDimension(ctx, req.(*ListAmountUidDimensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_ListHasBalanceUidDimension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHasBalanceUidDimensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).ListHasBalanceUidDimension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_ListHasBalanceUidDimension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).ListHasBalanceUidDimension(ctx, req.(*ListHasBalanceUidDimensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_ListHasBalanceDimension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHasBalanceDimensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).ListHasBalanceDimension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_ListHasBalanceDimension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).ListHasBalanceDimension(ctx, req.(*ListHasBalanceDimensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_AssetHistoryFundAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).AssetHistoryFundAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_AssetHistoryFundAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).AssetHistoryFundAmount(ctx, req.(*AssetHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_AssetHistoryAddressAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).AssetHistoryAddressAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_AssetHistoryAddressAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).AssetHistoryAddressAmount(ctx, req.(*AssetHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_ClientPageListNftAssetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageListNftAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).ClientPageListNftAssetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_ClientPageListNftAssetGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).ClientPageListNftAssetGroup(ctx, req.(*PageListNftAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_ClientPageListNftAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageListNftAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).ClientPageListNftAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_ClientPageListNftAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).ClientPageListNftAsset(ctx, req.(*PageListNftAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_GetNftBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NftAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).GetNftBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_GetNftBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).GetNftBalance(ctx, req.(*NftAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_PageListStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageListStatisticRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).PageListStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_PageListStatistic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).PageListStatistic(ctx, req.(*PageListStatisticRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_StatisticFundAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatisticFundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).StatisticFundAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_StatisticFundAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).StatisticFundAmount(ctx, req.(*StatisticFundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_StatisticFundRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatisticFundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).StatisticFundRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_StatisticFundRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).StatisticFundRate(ctx, req.(*StatisticFundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_GetUnspentTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnspentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).GetUnspentTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_GetUnspentTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).GetUnspentTx(ctx, req.(*UnspentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_GetNftRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NftRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).GetNftRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_GetNftRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).GetNftRecord(ctx, req.(*NftRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_JsonRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JsonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).JsonRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_JsonRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).JsonRpc(ctx, req.(*JsonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_KanbanSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KanbanSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).KanbanSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_KanbanSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).KanbanSummary(ctx, req.(*KanbanSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_KanbanTxChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KanbanChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).KanbanTxChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_KanbanTxChart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).KanbanTxChart(ctx, req.(*KanbanChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_KanbanContractChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KanbanChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).KanbanContractChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_KanbanContractChart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).KanbanContractChart(ctx, req.(*KanbanChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_GetBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockHeightReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).GetBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_GetBlockHeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).GetBlockHeight(ctx, req.(*GetBlockHeightReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Transaction_ServiceDesc is the grpc.ServiceDesc for Transaction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transaction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.transaction.v1.Transaction",
	HandlerType: (*TransactionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRecordFromWallet",
			Handler:    _Transaction_CreateRecordFromWallet_Handler,
		},
		{
			MethodName: "GetTransactionByHash",
			Handler:    _Transaction_GetTransactionByHash_Handler,
		},
		{
			MethodName: "PageLists",
			Handler:    _Transaction_PageLists_Handler,
		},
		{
			MethodName: "PageList",
			Handler:    _Transaction_PageList_Handler,
		},
		{
			MethodName: "GetAmount",
			Handler:    _Transaction_GetAmount_Handler,
		},
		{
			MethodName: "GetDappList",
			Handler:    _Transaction_GetDappList_Handler,
		},
		{
			MethodName: "GetAllOpenAmount",
			Handler:    _Transaction_GetAllOpenAmount_Handler,
		},
		{
			MethodName: "GetNonce",
			Handler:    _Transaction_GetNonce_Handler,
		},
		{
			MethodName: "GetDappListPageList",
			Handler:    _Transaction_GetDappListPageList_Handler,
		},
		{
			MethodName: "PageListAssetCurrency",
			Handler:    _Transaction_PageListAssetCurrency_Handler,
		},
		{
			MethodName: "PageListAsset",
			Handler:    _Transaction_PageListAsset_Handler,
		},
		{
			MethodName: "PageListAssetGroup",
			Handler:    _Transaction_PageListAssetGroup_Handler,
		},
		{
			MethodName: "ClientPageListAsset",
			Handler:    _Transaction_ClientPageListAsset_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _Transaction_GetBalance_Handler,
		},
		{
			MethodName: "ListAmountUidDimension",
			Handler:    _Transaction_ListAmountUidDimension_Handler,
		},
		{
			MethodName: "ListHasBalanceUidDimension",
			Handler:    _Transaction_ListHasBalanceUidDimension_Handler,
		},
		{
			MethodName: "ListHasBalanceDimension",
			Handler:    _Transaction_ListHasBalanceDimension_Handler,
		},
		{
			MethodName: "AssetHistoryFundAmount",
			Handler:    _Transaction_AssetHistoryFundAmount_Handler,
		},
		{
			MethodName: "AssetHistoryAddressAmount",
			Handler:    _Transaction_AssetHistoryAddressAmount_Handler,
		},
		{
			MethodName: "ClientPageListNftAssetGroup",
			Handler:    _Transaction_ClientPageListNftAssetGroup_Handler,
		},
		{
			MethodName: "ClientPageListNftAsset",
			Handler:    _Transaction_ClientPageListNftAsset_Handler,
		},
		{
			MethodName: "GetNftBalance",
			Handler:    _Transaction_GetNftBalance_Handler,
		},
		{
			MethodName: "PageListStatistic",
			Handler:    _Transaction_PageListStatistic_Handler,
		},
		{
			MethodName: "StatisticFundAmount",
			Handler:    _Transaction_StatisticFundAmount_Handler,
		},
		{
			MethodName: "StatisticFundRate",
			Handler:    _Transaction_StatisticFundRate_Handler,
		},
		{
			MethodName: "GetUnspentTx",
			Handler:    _Transaction_GetUnspentTx_Handler,
		},
		{
			MethodName: "GetNftRecord",
			Handler:    _Transaction_GetNftRecord_Handler,
		},
		{
			MethodName: "JsonRpc",
			Handler:    _Transaction_JsonRpc_Handler,
		},
		{
			MethodName: "KanbanSummary",
			Handler:    _Transaction_KanbanSummary_Handler,
		},
		{
			MethodName: "KanbanTxChart",
			Handler:    _Transaction_KanbanTxChart_Handler,
		},
		{
			MethodName: "KanbanContractChart",
			Handler:    _Transaction_KanbanContractChart_Handler,
		},
		{
			MethodName: "GetBlockHeight",
			Handler:    _Transaction_GetBlockHeight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "builder/v1/transaction.proto",
}
