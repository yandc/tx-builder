// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.26.1
// source: builder/v1/transaction.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type JsonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method    string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	Uid       string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	ChainName string `protobuf:"bytes,3,opt,name=chainName,proto3" json:"chainName,omitempty"`
	Params    string `protobuf:"bytes,4,opt,name=params,proto3" json:"params,omitempty"`
	Device    string `protobuf:"bytes,5,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *JsonReq) Reset() {
	*x = JsonReq{}
	mi := &file_builder_v1_transaction_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JsonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonReq) ProtoMessage() {}

func (x *JsonReq) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonReq.ProtoReflect.Descriptor instead.
func (*JsonReq) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{0}
}

func (x *JsonReq) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *JsonReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *JsonReq) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *JsonReq) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

func (x *JsonReq) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

type JsonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok       bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Response string `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
	ErrorMsg string `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
}

func (x *JsonResponse) Reset() {
	*x = JsonResponse{}
	mi := &file_builder_v1_transaction_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JsonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonResponse) ProtoMessage() {}

func (x *JsonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonResponse.ProtoReflect.Descriptor instead.
func (*JsonResponse) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{1}
}

func (x *JsonResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *JsonResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

func (x *JsonResponse) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type NftRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainName       string `protobuf:"bytes,1,opt,name=chainName,proto3" json:"chainName,omitempty"`
	ContractAddress string `protobuf:"bytes,2,opt,name=contractAddress,proto3" json:"contractAddress,omitempty"`
	TokenId         string `protobuf:"bytes,3,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
}

func (x *NftRecordReq) Reset() {
	*x = NftRecordReq{}
	mi := &file_builder_v1_transaction_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NftRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NftRecordReq) ProtoMessage() {}

func (x *NftRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NftRecordReq.ProtoReflect.Descriptor instead.
func (*NftRecordReq) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{2}
}

func (x *NftRecordReq) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *NftRecordReq) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *NftRecordReq) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

type NftRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok   bool              `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Data []*NftHistoryList `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *NftRecordResponse) Reset() {
	*x = NftRecordResponse{}
	mi := &file_builder_v1_transaction_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NftRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NftRecordResponse) ProtoMessage() {}

func (x *NftRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NftRecordResponse.ProtoReflect.Descriptor instead.
func (*NftRecordResponse) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{3}
}

func (x *NftRecordResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *NftRecordResponse) GetData() []*NftHistoryList {
	if x != nil {
		return x.Data
	}
	return nil
}

type NftHistoryList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromAddress     string `protobuf:"bytes,1,opt,name=fromAddress,proto3" json:"fromAddress,omitempty"`
	ToAddress       string `protobuf:"bytes,2,opt,name=toAddress,proto3" json:"toAddress,omitempty"`
	Quantity        string `protobuf:"bytes,3,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	TxTime          string `protobuf:"bytes,4,opt,name=txTime,proto3" json:"txTime,omitempty"`
	TransactionType string `protobuf:"bytes,5,opt,name=transactionType,proto3" json:"transactionType,omitempty"`
	TransactionHash string `protobuf:"bytes,6,opt,name=transactionHash,proto3" json:"transactionHash,omitempty"`
}

func (x *NftHistoryList) Reset() {
	*x = NftHistoryList{}
	mi := &file_builder_v1_transaction_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NftHistoryList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NftHistoryList) ProtoMessage() {}

func (x *NftHistoryList) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NftHistoryList.ProtoReflect.Descriptor instead.
func (*NftHistoryList) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{4}
}

func (x *NftHistoryList) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *NftHistoryList) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *NftHistoryList) GetQuantity() string {
	if x != nil {
		return x.Quantity
	}
	return ""
}

func (x *NftHistoryList) GetTxTime() string {
	if x != nil {
		return x.TxTime
	}
	return ""
}

func (x *NftHistoryList) GetTransactionType() string {
	if x != nil {
		return x.TransactionType
	}
	return ""
}

func (x *NftHistoryList) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

type UnspentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainName       string `protobuf:"bytes,1,opt,name=chainName,proto3" json:"chainName,omitempty"`
	IsUnspent       string `protobuf:"bytes,2,opt,name=isUnspent,proto3" json:"isUnspent,omitempty"`
	Uid             string `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Address         string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	TxHash          string `protobuf:"bytes,5,opt,name=txHash,proto3" json:"txHash,omitempty"`
	ContractAddress string `protobuf:"bytes,6,opt,name=contractAddress,proto3" json:"contractAddress,omitempty"`
}

func (x *UnspentReq) Reset() {
	*x = UnspentReq{}
	mi := &file_builder_v1_transaction_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnspentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnspentReq) ProtoMessage() {}

func (x *UnspentReq) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnspentReq.ProtoReflect.Descriptor instead.
func (*UnspentReq) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{5}
}

func (x *UnspentReq) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *UnspentReq) GetIsUnspent() string {
	if x != nil {
		return x.IsUnspent
	}
	return ""
}

func (x *UnspentReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *UnspentReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UnspentReq) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *UnspentReq) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

type UnspentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok            bool           `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	CellList      []*CellList    `protobuf:"bytes,2,rep,name=cell_list,json=cellList,proto3" json:"cell_list,omitempty"`
	UtxoList      []*UnspentList `protobuf:"bytes,3,rep,name=utxo_list,json=utxoList,proto3" json:"utxo_list,omitempty"`
	TokenCellList []*CellList    `protobuf:"bytes,4,rep,name=token_cell_list,json=tokenCellList,proto3" json:"token_cell_list,omitempty"`
}

func (x *UnspentResponse) Reset() {
	*x = UnspentResponse{}
	mi := &file_builder_v1_transaction_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnspentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnspentResponse) ProtoMessage() {}

func (x *UnspentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnspentResponse.ProtoReflect.Descriptor instead.
func (*UnspentResponse) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{6}
}

func (x *UnspentResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *UnspentResponse) GetCellList() []*CellList {
	if x != nil {
		return x.CellList
	}
	return nil
}

func (x *UnspentResponse) GetUtxoList() []*UnspentList {
	if x != nil {
		return x.UtxoList
	}
	return nil
}

func (x *UnspentResponse) GetTokenCellList() []*CellList {
	if x != nil {
		return x.TokenCellList
	}
	return nil
}

type UnspentList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uid       string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Hash      string `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	Index     string `protobuf:"bytes,4,opt,name=index,proto3" json:"index,omitempty"`
	ChainName string `protobuf:"bytes,5,opt,name=chainName,proto3" json:"chainName,omitempty"`
	Address   string `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
	Script    string `protobuf:"bytes,7,opt,name=script,proto3" json:"script,omitempty"`
	Unspent   int32  `protobuf:"varint,8,opt,name=unspent,proto3" json:"unspent,omitempty"`
	Amount    string `protobuf:"bytes,9,opt,name=amount,proto3" json:"amount,omitempty"`
	TxTime    int64  `protobuf:"varint,10,opt,name=txTime,proto3" json:"txTime,omitempty"`
	CreatedAt int64  `protobuf:"varint,11,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt int64  `protobuf:"varint,12,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *UnspentList) Reset() {
	*x = UnspentList{}
	mi := &file_builder_v1_transaction_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnspentList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnspentList) ProtoMessage() {}

func (x *UnspentList) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnspentList.ProtoReflect.Descriptor instead.
func (*UnspentList) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{7}
}

func (x *UnspentList) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UnspentList) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *UnspentList) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *UnspentList) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *UnspentList) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *UnspentList) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UnspentList) GetScript() string {
	if x != nil {
		return x.Script
	}
	return ""
}

func (x *UnspentList) GetUnspent() int32 {
	if x != nil {
		return x.Unspent
	}
	return 0
}

func (x *UnspentList) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *UnspentList) GetTxTime() int64 {
	if x != nil {
		return x.TxTime
	}
	return 0
}

func (x *UnspentList) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *UnspentList) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type CellList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutPoint *OutPoint `protobuf:"bytes,1,opt,name=outPoint,proto3" json:"outPoint,omitempty"`
	Capacity int64     `protobuf:"varint,2,opt,name=capacity,proto3" json:"capacity,omitempty"`
	Lock     *CellLock `protobuf:"bytes,3,opt,name=lock,proto3" json:"lock,omitempty"`
	Type     *CellLock `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Data     string    `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CellList) Reset() {
	*x = CellList{}
	mi := &file_builder_v1_transaction_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CellList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellList) ProtoMessage() {}

func (x *CellList) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellList.ProtoReflect.Descriptor instead.
func (*CellList) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{8}
}

func (x *CellList) GetOutPoint() *OutPoint {
	if x != nil {
		return x.OutPoint
	}
	return nil
}

func (x *CellList) GetCapacity() int64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *CellList) GetLock() *CellLock {
	if x != nil {
		return x.Lock
	}
	return nil
}

func (x *CellList) GetType() *CellLock {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *CellList) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type OutPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash string `protobuf:"bytes,1,opt,name=txHash,proto3" json:"txHash,omitempty"`
	Index  string `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *OutPoint) Reset() {
	*x = OutPoint{}
	mi := &file_builder_v1_transaction_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OutPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutPoint) ProtoMessage() {}

func (x *OutPoint) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutPoint.ProtoReflect.Descriptor instead.
func (*OutPoint) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{9}
}

func (x *OutPoint) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *OutPoint) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

type CellLock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeHash string `protobuf:"bytes,1,opt,name=codeHash,proto3" json:"codeHash,omitempty"`
	HashType string `protobuf:"bytes,2,opt,name=hashType,proto3" json:"hashType,omitempty"`
	Args     string `protobuf:"bytes,3,opt,name=args,proto3" json:"args,omitempty"`
}

func (x *CellLock) Reset() {
	*x = CellLock{}
	mi := &file_builder_v1_transaction_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CellLock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellLock) ProtoMessage() {}

func (x *CellLock) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellLock.ProtoReflect.Descriptor instead.
func (*CellLock) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{10}
}

func (x *CellLock) GetCodeHash() string {
	if x != nil {
		return x.CodeHash
	}
	return ""
}

func (x *CellLock) GetHashType() string {
	if x != nil {
		return x.HashType
	}
	return ""
}

func (x *CellLock) GetArgs() string {
	if x != nil {
		return x.Args
	}
	return ""
}

type DappPageListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainName       string `protobuf:"bytes,1,opt,name=chainName,proto3" json:"chainName,omitempty"`
	ContractAddress string `protobuf:"bytes,2,opt,name=contractAddress,proto3" json:"contractAddress,omitempty"`
	Page            int32  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`   // 默认1
	Limit           int32  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"` //  默认20
	Fromuid         string `protobuf:"bytes,5,opt,name=fromuid,proto3" json:"fromuid,omitempty"`
	FromAddress     string `protobuf:"bytes,6,opt,name=fromAddress,proto3" json:"fromAddress,omitempty"`
	OrderBy         string `protobuf:"bytes,7,opt,name=orderBy,proto3" json:"orderBy,omitempty"`
	DataDirection   int32  `protobuf:"varint,8,opt,name=dataDirection,proto3" json:"dataDirection,omitempty"`
	StartIndex      int64  `protobuf:"varint,9,opt,name=startIndex,proto3" json:"startIndex,omitempty"`
	DappType        string `protobuf:"bytes,10,opt,name=dappType,proto3" json:"dappType,omitempty"`
	Platform        string `protobuf:"bytes,11,opt,name=platform,proto3" json:"platform,omitempty"`
	OsVersion       int32  `protobuf:"varint,12,opt,name=osVersion,proto3" json:"osVersion,omitempty"`
}

func (x *DappPageListReq) Reset() {
	*x = DappPageListReq{}
	mi := &file_builder_v1_transaction_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DappPageListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DappPageListReq) ProtoMessage() {}

func (x *DappPageListReq) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DappPageListReq.ProtoReflect.Descriptor instead.
func (*DappPageListReq) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{11}
}

func (x *DappPageListReq) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *DappPageListReq) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *DappPageListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DappPageListReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *DappPageListReq) GetFromuid() string {
	if x != nil {
		return x.Fromuid
	}
	return ""
}

func (x *DappPageListReq) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *DappPageListReq) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *DappPageListReq) GetDataDirection() int32 {
	if x != nil {
		return x.DataDirection
	}
	return 0
}

func (x *DappPageListReq) GetStartIndex() int64 {
	if x != nil {
		return x.StartIndex
	}
	return 0
}

func (x *DappPageListReq) GetDappType() string {
	if x != nil {
		return x.DappType
	}
	return ""
}

func (x *DappPageListReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *DappPageListReq) GetOsVersion() int32 {
	if x != nil {
		return x.OsVersion
	}
	return 0
}

type DappPageListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok   bool          `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Data *DappPageData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DappPageListResp) Reset() {
	*x = DappPageListResp{}
	mi := &file_builder_v1_transaction_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DappPageListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DappPageListResp) ProtoMessage() {}

func (x *DappPageListResp) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DappPageListResp.ProtoReflect.Descriptor instead.
func (*DappPageListResp) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{12}
}

func (x *DappPageListResp) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *DappPageListResp) GetData() *DappPageData {
	if x != nil {
		return x.Data
	}
	return nil
}

type DappPageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  int32                `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit int32                `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Total int64                `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*TransactionRecord `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *DappPageData) Reset() {
	*x = DappPageData{}
	mi := &file_builder_v1_transaction_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DappPageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DappPageData) ProtoMessage() {}

func (x *DappPageData) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DappPageData.ProtoReflect.Descriptor instead.
func (*DappPageData) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{13}
}

func (x *DappPageData) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DappPageData) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *DappPageData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DappPageData) GetData() []*TransactionRecord {
	if x != nil {
		return x.Data
	}
	return nil
}

type NonceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainName string `protobuf:"bytes,1,opt,name=chainName,proto3" json:"chainName,omitempty"`
	Address   string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *NonceReq) Reset() {
	*x = NonceReq{}
	mi := &file_builder_v1_transaction_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NonceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonceReq) ProtoMessage() {}

func (x *NonceReq) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonceReq.ProtoReflect.Descriptor instead.
func (*NonceReq) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{14}
}

func (x *NonceReq) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *NonceReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type NonceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok    bool  `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Nonce int64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *NonceResp) Reset() {
	*x = NonceResp{}
	mi := &file_builder_v1_transaction_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NonceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonceResp) ProtoMessage() {}

func (x *NonceResp) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonceResp.ProtoReflect.Descriptor instead.
func (*NonceResp) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{15}
}

func (x *NonceResp) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *NonceResp) GetNonce() int64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

type OpenAmountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid             string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                         //--非必输
	Currency        string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`               // -- 必输  法币标的物
	ChainName       string `protobuf:"bytes,3,opt,name=chainName,proto3" json:"chainName,omitempty"`             //  -- 非必输
	Address         string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`                 //-- 非必输
	ContractAddress string `protobuf:"bytes,5,opt,name=contractAddress,proto3" json:"contractAddress,omitempty"` //  -- 非必输
}

func (x *OpenAmountReq) Reset() {
	*x = OpenAmountReq{}
	mi := &file_builder_v1_transaction_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenAmountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenAmountReq) ProtoMessage() {}

func (x *OpenAmountReq) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenAmountReq.ProtoReflect.Descriptor instead.
func (*OpenAmountReq) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{16}
}

func (x *OpenAmountReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *OpenAmountReq) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *OpenAmountReq) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *OpenAmountReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *OpenAmountReq) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

type OpenAmoutResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok   bool            `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Data *OpenAmountInfo `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *OpenAmoutResp) Reset() {
	*x = OpenAmoutResp{}
	mi := &file_builder_v1_transaction_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenAmoutResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenAmoutResp) ProtoMessage() {}

func (x *OpenAmoutResp) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenAmoutResp.ProtoReflect.Descriptor instead.
func (*OpenAmoutResp) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{17}
}

func (x *OpenAmoutResp) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *OpenAmoutResp) GetData() *OpenAmountInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type OpenAmountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RiskExposureAmount string `protobuf:"bytes,1,opt,name=riskExposureAmount,proto3" json:"riskExposureAmount,omitempty"`
	DappCount          int64  `protobuf:"varint,2,opt,name=dappCount,proto3" json:"dappCount,omitempty"`
}

func (x *OpenAmountInfo) Reset() {
	*x = OpenAmountInfo{}
	mi := &file_builder_v1_transaction_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenAmountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenAmountInfo) ProtoMessage() {}

func (x *OpenAmountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenAmountInfo.ProtoReflect.Descriptor instead.
func (*OpenAmountInfo) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{18}
}

func (x *OpenAmountInfo) GetRiskExposureAmount() string {
	if x != nil {
		return x.RiskExposureAmount
	}
	return ""
}

func (x *OpenAmountInfo) GetDappCount() int64 {
	if x != nil {
		return x.DappCount
	}
	return 0
}

type DappListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid             string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                         //-- 必输
	ChainName       string   `protobuf:"bytes,2,opt,name=chainName,proto3" json:"chainName,omitempty"`             //-- 必输
	Addresses       []string `protobuf:"bytes,3,rep,name=addresses,proto3" json:"addresses,omitempty"`             //-- 非必输
	ContractAddress string   `protobuf:"bytes,4,opt,name=contractAddress,proto3" json:"contractAddress,omitempty"` // -- 非必输
	IsCancel        bool     `protobuf:"varint,5,opt,name=isCancel,proto3" json:"isCancel,omitempty"`
	IsCancelStatus  string   `protobuf:"bytes,6,opt,name=isCancelStatus,proto3" json:"isCancelStatus,omitempty"`
	DappType        string   `protobuf:"bytes,7,opt,name=dappType,proto3" json:"dappType,omitempty"`
	Platform        string   `protobuf:"bytes,8,opt,name=platform,proto3" json:"platform,omitempty"`
	OsVersion       int32    `protobuf:"varint,9,opt,name=osVersion,proto3" json:"osVersion,omitempty"`
}

func (x *DappListReq) Reset() {
	*x = DappListReq{}
	mi := &file_builder_v1_transaction_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DappListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DappListReq) ProtoMessage() {}

func (x *DappListReq) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DappListReq.ProtoReflect.Descriptor instead.
func (*DappListReq) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{19}
}

func (x *DappListReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *DappListReq) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *DappListReq) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *DappListReq) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *DappListReq) GetIsCancel() bool {
	if x != nil {
		return x.IsCancel
	}
	return false
}

func (x *DappListReq) GetIsCancelStatus() string {
	if x != nil {
		return x.IsCancelStatus
	}
	return ""
}

func (x *DappListReq) GetDappType() string {
	if x != nil {
		return x.DappType
	}
	return ""
}

func (x *DappListReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *DappListReq) GetOsVersion() int32 {
	if x != nil {
		return x.OsVersion
	}
	return 0
}

type DappListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok   bool        `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Data []*DappInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *DappListResp) Reset() {
	*x = DappListResp{}
	mi := &file_builder_v1_transaction_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DappListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DappListResp) ProtoMessage() {}

func (x *DappListResp) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DappListResp.ProtoReflect.Descriptor instead.
func (*DappListResp) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{20}
}

func (x *DappListResp) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *DappListResp) GetData() []*DappInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type DappInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractAddress string `protobuf:"bytes,1,opt,name=contractAddress,proto3" json:"contractAddress,omitempty"`
	Chain           string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	Uid             string `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	LastTxhash      string `protobuf:"bytes,4,opt,name=lastTxhash,proto3" json:"lastTxhash,omitempty"`
	Decimals        string `protobuf:"bytes,5,opt,name=decimals,proto3" json:"decimals,omitempty"`
	Address         string `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
	Token           string `protobuf:"bytes,7,opt,name=token,proto3" json:"token,omitempty"`
	ToAddress       string `protobuf:"bytes,8,opt,name=toAddress,proto3" json:"toAddress,omitempty"`
	Amount          string `protobuf:"bytes,9,opt,name=amount,proto3" json:"amount,omitempty"`
	Original        string `protobuf:"bytes,10,opt,name=original,proto3" json:"original,omitempty"`
	Symbol          string `protobuf:"bytes,11,opt,name=symbol,proto3" json:"symbol,omitempty"`
	DappInfo        string `protobuf:"bytes,12,opt,name=dappInfo,proto3" json:"dappInfo,omitempty"`
	Status          string `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	TxTime          int64  `protobuf:"varint,14,opt,name=txTime,proto3" json:"txTime,omitempty"`
	DappType        string `protobuf:"bytes,15,opt,name=dappType,proto3" json:"dappType,omitempty"`
	CollectionName  string `protobuf:"bytes,16,opt,name=collectionName,proto3" json:"collectionName,omitempty"`
	Logo            string `protobuf:"bytes,17,opt,name=logo,proto3" json:"logo,omitempty"`
}

func (x *DappInfo) Reset() {
	*x = DappInfo{}
	mi := &file_builder_v1_transaction_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DappInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DappInfo) ProtoMessage() {}

func (x *DappInfo) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DappInfo.ProtoReflect.Descriptor instead.
func (*DappInfo) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{21}
}

func (x *DappInfo) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *DappInfo) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *DappInfo) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *DappInfo) GetLastTxhash() string {
	if x != nil {
		return x.LastTxhash
	}
	return ""
}

func (x *DappInfo) GetDecimals() string {
	if x != nil {
		return x.Decimals
	}
	return ""
}

func (x *DappInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DappInfo) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *DappInfo) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *DappInfo) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *DappInfo) GetOriginal() string {
	if x != nil {
		return x.Original
	}
	return ""
}

func (x *DappInfo) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *DappInfo) GetDappInfo() string {
	if x != nil {
		return x.DappInfo
	}
	return ""
}

func (x *DappInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DappInfo) GetTxTime() int64 {
	if x != nil {
		return x.TxTime
	}
	return 0
}

func (x *DappInfo) GetDappType() string {
	if x != nil {
		return x.DappType
	}
	return ""
}

func (x *DappInfo) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *DappInfo) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

type CreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Code   uint64 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Mes    string `protobuf:"bytes,3,opt,name=mes,proto3" json:"mes,omitempty"`
}

func (x *CreateResponse) Reset() {
	*x = CreateResponse{}
	mi := &file_builder_v1_transaction_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResponse) ProtoMessage() {}

func (x *CreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResponse.ProtoReflect.Descriptor instead.
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{22}
}

func (x *CreateResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *CreateResponse) GetCode() uint64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateResponse) GetMes() string {
	if x != nil {
		return x.Mes
	}
	return ""
}

type TransactionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid                  string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                          //-- 必输
	ChainName            string `protobuf:"bytes,2,opt,name=chainName,proto3" json:"chainName,omitempty"`              //-- 必输
	TransactionHash      string `protobuf:"bytes,3,opt,name=transactionHash,proto3" json:"transactionHash,omitempty"`  // -- 必输
	Status               string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`                    // (status[success,fail,pending,refuse,no_status,cancel,invalid]) -- 必输
	FromAddress          string `protobuf:"bytes,5,opt,name=fromAddress,proto3" json:"fromAddress,omitempty"`          //  -- 必输
	ToAddress            string `protobuf:"bytes,6,opt,name=toAddress,proto3" json:"toAddress,omitempty"`              //  -- 必输
	Amount               string `protobuf:"bytes,7,opt,name=amount,proto3" json:"amount,omitempty"`                    // -- 必输
	FeeAmount            string `protobuf:"bytes,8,opt,name=feeAmount,proto3" json:"feeAmount,omitempty"`              //  -- 非必输
	TransactionType      string `protobuf:"bytes,9,opt,name=transactionType,proto3" json:"transactionType,omitempty"`  //  -- 非必输
	ContractAddress      string `protobuf:"bytes,10,opt,name=contractAddress,proto3" json:"contractAddress,omitempty"` //   -- 非必输
	TxTime               int64  `protobuf:"varint,11,opt,name=txTime,proto3" json:"txTime,omitempty"`                  // -- 非必输
	Nonce                int64  `protobuf:"varint,12,opt,name=nonce,proto3" json:"nonce,omitempty"`                    //  -- 非必输
	GasLimit             string `protobuf:"bytes,13,opt,name=gasLimit,proto3" json:"gasLimit,omitempty"`               //  -- 非必输 Deprecated by feeData
	GasUsed              string `protobuf:"bytes,14,opt,name=gasUsed,proto3" json:"gasUsed,omitempty"`                 // -- 非必输 Deprecated by feeData
	GasPrice             string `protobuf:"bytes,15,opt,name=gasPrice,proto3" json:"gasPrice,omitempty"`               //  -- 非必输 Deprecated by feeData
	BaseFee              string `protobuf:"bytes,16,opt,name=baseFee,proto3" json:"baseFee,omitempty"`                 // -- 非必输 Deprecated by feeData
	Data                 string `protobuf:"bytes,17,opt,name=data,proto3" json:"data,omitempty"`                       //  -- 非必输
	DappData             string `protobuf:"bytes,18,opt,name=dappData,proto3" json:"dappData,omitempty"`               //  -- 非必输
	EventLog             string `protobuf:"bytes,19,opt,name=eventLog,proto3" json:"eventLog,omitempty"`               //  -- 非必输
	ParseData            string `protobuf:"bytes,20,opt,name=parseData,proto3" json:"parseData,omitempty"`             //  -- 非必输 Deprecated
	NetUsage             string `protobuf:"bytes,21,opt,name=netUsage,proto3" json:"netUsage,omitempty"`               //  -- 非必输 Deprecated by feeData
	FeeLimit             string `protobuf:"bytes,22,opt,name=feeLimit,proto3" json:"feeLimit,omitempty"`               //  -- 非必输 Deprecated by feeData
	EnergyUsage          string `protobuf:"bytes,23,opt,name=energyUsage,proto3" json:"energyUsage,omitempty"`         //  -- 非必输 Deprecated by feeData
	BlockHash            string `protobuf:"bytes,24,opt,name=blockHash,proto3" json:"blockHash,omitempty"`             //-- 非必输
	BlockNumber          int64  `protobuf:"varint,25,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`        //  -- 非必输
	CreatedAt            int64  `protobuf:"varint,26,opt,name=createdAt,proto3" json:"createdAt,omitempty"`            // -- 非必输
	UpdatedAt            int64  `protobuf:"varint,27,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`            // -- 非必输
	ClientData           string `protobuf:"bytes,28,opt,name=clientData,proto3" json:"clientData,omitempty"`           // Deprecated
	MaxFeePerGas         string `protobuf:"bytes,29,opt,name=maxFeePerGas,proto3" json:"maxFeePerGas,omitempty"`
	MaxPriorityFeePerGas string `protobuf:"bytes,30,opt,name=maxPriorityFeePerGas,proto3" json:"maxPriorityFeePerGas,omitempty"`
	FeeData              string `protobuf:"bytes,31,opt,name=feeData,proto3" json:"feeData,omitempty"`
	OperateType          string `protobuf:"bytes,32,opt,name=operateType,proto3" json:"operateType,omitempty"`
	OriginalHash         string `protobuf:"bytes,33,opt,name=originalHash,proto3" json:"originalHash,omitempty"`
	TokenGasless         string `protobuf:"bytes,34,opt,name=tokenGasless,proto3" json:"tokenGasless,omitempty"`
	TokenInfo            string `protobuf:"bytes,35,opt,name=tokenInfo,proto3" json:"tokenInfo,omitempty"`
	SendTime             int64  `protobuf:"varint,36,opt,name=sendTime,proto3" json:"sendTime,omitempty"`
	SessionId            string `protobuf:"bytes,37,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	ShortHost            string `protobuf:"bytes,38,opt,name=shortHost,proto3" json:"shortHost,omitempty"`
	Memo                 string `protobuf:"bytes,39,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (x *TransactionReq) Reset() {
	*x = TransactionReq{}
	mi := &file_builder_v1_transaction_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionReq) ProtoMessage() {}

func (x *TransactionReq) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionReq.ProtoReflect.Descriptor instead.
func (*TransactionReq) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{23}
}

func (x *TransactionReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *TransactionReq) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *TransactionReq) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *TransactionReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TransactionReq) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *TransactionReq) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *TransactionReq) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *TransactionReq) GetFeeAmount() string {
	if x != nil {
		return x.FeeAmount
	}
	return ""
}

func (x *TransactionReq) GetTransactionType() string {
	if x != nil {
		return x.TransactionType
	}
	return ""
}

func (x *TransactionReq) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *TransactionReq) GetTxTime() int64 {
	if x != nil {
		return x.TxTime
	}
	return 0
}

func (x *TransactionReq) GetNonce() int64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *TransactionReq) GetGasLimit() string {
	if x != nil {
		return x.GasLimit
	}
	return ""
}

func (x *TransactionReq) GetGasUsed() string {
	if x != nil {
		return x.GasUsed
	}
	return ""
}

func (x *TransactionReq) GetGasPrice() string {
	if x != nil {
		return x.GasPrice
	}
	return ""
}

func (x *TransactionReq) GetBaseFee() string {
	if x != nil {
		return x.BaseFee
	}
	return ""
}

func (x *TransactionReq) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *TransactionReq) GetDappData() string {
	if x != nil {
		return x.DappData
	}
	return ""
}

func (x *TransactionReq) GetEventLog() string {
	if x != nil {
		return x.EventLog
	}
	return ""
}

func (x *TransactionReq) GetParseData() string {
	if x != nil {
		return x.ParseData
	}
	return ""
}

func (x *TransactionReq) GetNetUsage() string {
	if x != nil {
		return x.NetUsage
	}
	return ""
}

func (x *TransactionReq) GetFeeLimit() string {
	if x != nil {
		return x.FeeLimit
	}
	return ""
}

func (x *TransactionReq) GetEnergyUsage() string {
	if x != nil {
		return x.EnergyUsage
	}
	return ""
}

func (x *TransactionReq) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *TransactionReq) GetBlockNumber() int64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *TransactionReq) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TransactionReq) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *TransactionReq) GetClientData() string {
	if x != nil {
		return x.ClientData
	}
	return ""
}

func (x *TransactionReq) GetMaxFeePerGas() string {
	if x != nil {
		return x.MaxFeePerGas
	}
	return ""
}

func (x *TransactionReq) GetMaxPriorityFeePerGas() string {
	if x != nil {
		return x.MaxPriorityFeePerGas
	}
	return ""
}

func (x *TransactionReq) GetFeeData() string {
	if x != nil {
		return x.FeeData
	}
	return ""
}

func (x *TransactionReq) GetOperateType() string {
	if x != nil {
		return x.OperateType
	}
	return ""
}

func (x *TransactionReq) GetOriginalHash() string {
	if x != nil {
		return x.OriginalHash
	}
	return ""
}

func (x *TransactionReq) GetTokenGasless() string {
	if x != nil {
		return x.TokenGasless
	}
	return ""
}

func (x *TransactionReq) GetTokenInfo() string {
	if x != nil {
		return x.TokenInfo
	}
	return ""
}

func (x *TransactionReq) GetSendTime() int64 {
	if x != nil {
		return x.SendTime
	}
	return 0
}

func (x *TransactionReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *TransactionReq) GetShortHost() string {
	if x != nil {
		return x.ShortHost
	}
	return ""
}

func (x *TransactionReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

type GetTransactionByHashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform  string `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	OsVersion int32  `protobuf:"varint,2,opt,name=osVersion,proto3" json:"osVersion,omitempty"`
	ChainName string `protobuf:"bytes,3,opt,name=chainName,proto3" json:"chainName,omitempty"`
	Hash      string `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *GetTransactionByHashRequest) Reset() {
	*x = GetTransactionByHashRequest{}
	mi := &file_builder_v1_transaction_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransactionByHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionByHashRequest) ProtoMessage() {}

func (x *GetTransactionByHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionByHashRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionByHashRequest) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{24}
}

func (x *GetTransactionByHashRequest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *GetTransactionByHashRequest) GetOsVersion() int32 {
	if x != nil {
		return x.OsVersion
	}
	return 0
}

func (x *GetTransactionByHashRequest) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *GetTransactionByHashRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type PageListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainName                string   `protobuf:"bytes,1,opt,name=chainName,proto3" json:"chainName,omitempty"` //-- 必输
	FromUid                  string   `protobuf:"bytes,2,opt,name=fromUid,proto3" json:"fromUid,omitempty"`
	ToUid                    string   `protobuf:"bytes,3,opt,name=toUid,proto3" json:"toUid,omitempty"`
	Uid                      string   `protobuf:"bytes,4,opt,name=uid,proto3" json:"uid,omitempty"`
	FromAddressList          []string `protobuf:"bytes,5,rep,name=fromAddressList,proto3" json:"fromAddressList,omitempty"`
	ToAddressList            []string `protobuf:"bytes,6,rep,name=toAddressList,proto3" json:"toAddressList,omitempty"`
	Address                  string   `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	ContractAddress          string   `protobuf:"bytes,8,opt,name=contractAddress,proto3" json:"contractAddress,omitempty"`
	StatusList               []string `protobuf:"bytes,9,rep,name=statusList,proto3" json:"statusList,omitempty"`
	StatusNotInList          []string `protobuf:"bytes,10,rep,name=statusNotInList,proto3" json:"statusNotInList,omitempty"`
	TransactionTypeList      []string `protobuf:"bytes,11,rep,name=transactionTypeList,proto3" json:"transactionTypeList,omitempty"`
	TransactionTypeNotInList []string `protobuf:"bytes,12,rep,name=transactionTypeNotInList,proto3" json:"transactionTypeNotInList,omitempty"`
	TransactionHashList      []string `protobuf:"bytes,13,rep,name=transactionHashList,proto3" json:"transactionHashList,omitempty"`
	StartTime                int64    `protobuf:"varint,14,opt,name=startTime,proto3" json:"startTime,omitempty"`
	StopTime                 int64    `protobuf:"varint,15,opt,name=stopTime,proto3" json:"stopTime,omitempty"`
	OrderBy                  string   `protobuf:"bytes,16,opt,name=orderBy,proto3" json:"orderBy,omitempty"`
	DataDirection            int32    `protobuf:"varint,17,opt,name=dataDirection,proto3" json:"dataDirection,omitempty"`
	StartIndex               int64    `protobuf:"varint,18,opt,name=startIndex,proto3" json:"startIndex,omitempty"`
	PageNum                  int32    `protobuf:"varint,19,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	PageSize                 int32    `protobuf:"varint,20,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Total                    bool     `protobuf:"varint,21,opt,name=total,proto3" json:"total,omitempty"`
	Platform                 string   `protobuf:"bytes,22,opt,name=platform,proto3" json:"platform,omitempty"`
	OsVersion                int32    `protobuf:"varint,23,opt,name=osVersion,proto3" json:"osVersion,omitempty"`
	OperateTypeList          []string `protobuf:"bytes,24,rep,name=operateTypeList,proto3" json:"operateTypeList,omitempty"`
	TokenAddress             string   `protobuf:"bytes,25,opt,name=tokenAddress,proto3" json:"tokenAddress,omitempty"`
	AssetType                string   `protobuf:"bytes,26,opt,name=assetType,proto3" json:"assetType,omitempty"`
	Nonce                    *int64   `protobuf:"varint,27,opt,name=nonce,proto3,oneof" json:"nonce,omitempty"`
	PaymentId                string   `protobuf:"bytes,28,opt,name=paymentId,proto3" json:"paymentId,omitempty"`
	PayEventType             string   `protobuf:"bytes,29,opt,name=payEventType,proto3" json:"payEventType,omitempty"`
}

func (x *PageListRequest) Reset() {
	*x = PageListRequest{}
	mi := &file_builder_v1_transaction_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PageListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageListRequest) ProtoMessage() {}

func (x *PageListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageListRequest.ProtoReflect.Descriptor instead.
func (*PageListRequest) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{25}
}

func (x *PageListRequest) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *PageListRequest) GetFromUid() string {
	if x != nil {
		return x.FromUid
	}
	return ""
}

func (x *PageListRequest) GetToUid() string {
	if x != nil {
		return x.ToUid
	}
	return ""
}

func (x *PageListRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *PageListRequest) GetFromAddressList() []string {
	if x != nil {
		return x.FromAddressList
	}
	return nil
}

func (x *PageListRequest) GetToAddressList() []string {
	if x != nil {
		return x.ToAddressList
	}
	return nil
}

func (x *PageListRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *PageListRequest) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *PageListRequest) GetStatusList() []string {
	if x != nil {
		return x.StatusList
	}
	return nil
}

func (x *PageListRequest) GetStatusNotInList() []string {
	if x != nil {
		return x.StatusNotInList
	}
	return nil
}

func (x *PageListRequest) GetTransactionTypeList() []string {
	if x != nil {
		return x.TransactionTypeList
	}
	return nil
}

func (x *PageListRequest) GetTransactionTypeNotInList() []string {
	if x != nil {
		return x.TransactionTypeNotInList
	}
	return nil
}

func (x *PageListRequest) GetTransactionHashList() []string {
	if x != nil {
		return x.TransactionHashList
	}
	return nil
}

func (x *PageListRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *PageListRequest) GetStopTime() int64 {
	if x != nil {
		return x.StopTime
	}
	return 0
}

func (x *PageListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *PageListRequest) GetDataDirection() int32 {
	if x != nil {
		return x.DataDirection
	}
	return 0
}

func (x *PageListRequest) GetStartIndex() int64 {
	if x != nil {
		return x.StartIndex
	}
	return 0
}

func (x *PageListRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *PageListRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PageListRequest) GetTotal() bool {
	if x != nil {
		return x.Total
	}
	return false
}

func (x *PageListRequest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *PageListRequest) GetOsVersion() int32 {
	if x != nil {
		return x.OsVersion
	}
	return 0
}

func (x *PageListRequest) GetOperateTypeList() []string {
	if x != nil {
		return x.OperateTypeList
	}
	return nil
}

func (x *PageListRequest) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

func (x *PageListRequest) GetAssetType() string {
	if x != nil {
		return x.AssetType
	}
	return ""
}

func (x *PageListRequest) GetNonce() int64 {
	if x != nil && x.Nonce != nil {
		return *x.Nonce
	}
	return 0
}

func (x *PageListRequest) GetPaymentId() string {
	if x != nil {
		return x.PaymentId
	}
	return ""
}

func (x *PageListRequest) GetPayEventType() string {
	if x != nil {
		return x.PayEventType
	}
	return ""
}

type PageListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*TransactionRecord `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *PageListResponse) Reset() {
	*x = PageListResponse{}
	mi := &file_builder_v1_transaction_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PageListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageListResponse) ProtoMessage() {}

func (x *PageListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageListResponse.ProtoReflect.Descriptor instead.
func (*PageListResponse) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{26}
}

func (x *PageListResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PageListResponse) GetList() []*TransactionRecord {
	if x != nil {
		return x.List
	}
	return nil
}

type TransactionRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ChainName            string               `protobuf:"bytes,2,opt,name=chainName,proto3" json:"chainName,omitempty"`
	BlockHash            string               `protobuf:"bytes,3,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
	BlockNumber          int64                `protobuf:"varint,4,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	TransactionHash      string               `protobuf:"bytes,5,opt,name=transactionHash,proto3" json:"transactionHash,omitempty"`
	FromAddress          string               `protobuf:"bytes,6,opt,name=fromAddress,proto3" json:"fromAddress,omitempty"`
	ToAddress            string               `protobuf:"bytes,7,opt,name=toAddress,proto3" json:"toAddress,omitempty"`
	FromUid              string               `protobuf:"bytes,8,opt,name=fromUid,proto3" json:"fromUid,omitempty"`
	ToUid                string               `protobuf:"bytes,9,opt,name=toUid,proto3" json:"toUid,omitempty"`
	Amount               string               `protobuf:"bytes,10,opt,name=amount,proto3" json:"amount,omitempty"`
	FeeAmount            string               `protobuf:"bytes,11,opt,name=feeAmount,proto3" json:"feeAmount,omitempty"`
	Status               string               `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	TransactionType      string               `protobuf:"bytes,13,opt,name=transactionType,proto3" json:"transactionType,omitempty"`
	ContractAddress      string               `protobuf:"bytes,14,opt,name=contractAddress,proto3" json:"contractAddress,omitempty"`
	TxTime               int64                `protobuf:"varint,15,opt,name=txTime,proto3" json:"txTime,omitempty"`
	Nonce                int64                `protobuf:"varint,16,opt,name=nonce,proto3" json:"nonce,omitempty"`
	GasLimit             string               `protobuf:"bytes,17,opt,name=gasLimit,proto3" json:"gasLimit,omitempty"`
	GasUsed              string               `protobuf:"bytes,18,opt,name=gasUsed,proto3" json:"gasUsed,omitempty"`
	GasPrice             string               `protobuf:"bytes,19,opt,name=gasPrice,proto3" json:"gasPrice,omitempty"`
	BaseFee              string               `protobuf:"bytes,20,opt,name=baseFee,proto3" json:"baseFee,omitempty"`
	MaxFeePerGas         string               `protobuf:"bytes,21,opt,name=maxFeePerGas,proto3" json:"maxFeePerGas,omitempty"`
	MaxPriorityFeePerGas string               `protobuf:"bytes,22,opt,name=maxPriorityFeePerGas,proto3" json:"maxPriorityFeePerGas,omitempty"`
	Data                 string               `protobuf:"bytes,23,opt,name=data,proto3" json:"data,omitempty"`
	DappData             string               `protobuf:"bytes,24,opt,name=dappData,proto3" json:"dappData,omitempty"`
	EventLog             string               `protobuf:"bytes,25,opt,name=eventLog,proto3" json:"eventLog,omitempty"`
	ParseData            string               `protobuf:"bytes,26,opt,name=parseData,proto3" json:"parseData,omitempty"`
	NetUsage             string               `protobuf:"bytes,27,opt,name=netUsage,proto3" json:"netUsage,omitempty"`
	FeeLimit             string               `protobuf:"bytes,28,opt,name=feeLimit,proto3" json:"feeLimit,omitempty"`
	EnergyUsage          string               `protobuf:"bytes,29,opt,name=energyUsage,proto3" json:"energyUsage,omitempty"`
	CreatedAt            int64                `protobuf:"varint,30,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt            int64                `protobuf:"varint,31,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	ClientData           string               `protobuf:"bytes,32,opt,name=clientData,proto3" json:"clientData,omitempty"`
	FeeData              string               `protobuf:"bytes,33,opt,name=feeData,proto3" json:"feeData,omitempty"`
	Cursor               int64                `protobuf:"varint,34,opt,name=cursor,proto3" json:"cursor,omitempty"`
	OperateType          string               `protobuf:"bytes,35,opt,name=operateType,proto3" json:"operateType,omitempty"`
	OriginalHash         string               `protobuf:"bytes,36,opt,name=originalHash,proto3" json:"originalHash,omitempty"`
	OperateRecordList    []*TransactionRecord `protobuf:"bytes,37,rep,name=operateRecordList,proto3" json:"operateRecordList,omitempty"`
	TokenGasless         string               `protobuf:"bytes,38,opt,name=tokenGasless,proto3" json:"tokenGasless,omitempty"`
	TokenInfo            string               `protobuf:"bytes,39,opt,name=tokenInfo,proto3" json:"tokenInfo,omitempty"`
	SendTime             int64                `protobuf:"varint,40,opt,name=sendTime,proto3" json:"sendTime,omitempty"`
	SessionId            string               `protobuf:"bytes,41,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	StatusDetail         string               `protobuf:"bytes,42,opt,name=statusDetail,proto3" json:"statusDetail,omitempty"`
	ShortHost            string               `protobuf:"bytes,43,opt,name=shortHost,proto3" json:"shortHost,omitempty"`
	Memo                 string               `protobuf:"bytes,44,opt,name=memo,proto3" json:"memo,omitempty"`
	EventLogCount        string               `protobuf:"bytes,45,opt,name=eventLogCount,proto3" json:"eventLogCount,omitempty"`
	PaymentId            string               `protobuf:"bytes,46,opt,name=paymentId,proto3" json:"paymentId,omitempty"`
	PayEventType         string               `protobuf:"bytes,47,opt,name=payEventType,proto3" json:"payEventType,omitempty"`
}

func (x *TransactionRecord) Reset() {
	*x = TransactionRecord{}
	mi := &file_builder_v1_transaction_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionRecord) ProtoMessage() {}

func (x *TransactionRecord) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionRecord.ProtoReflect.Descriptor instead.
func (*TransactionRecord) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{27}
}

func (x *TransactionRecord) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TransactionRecord) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *TransactionRecord) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *TransactionRecord) GetBlockNumber() int64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *TransactionRecord) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *TransactionRecord) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *TransactionRecord) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *TransactionRecord) GetFromUid() string {
	if x != nil {
		return x.FromUid
	}
	return ""
}

func (x *TransactionRecord) GetToUid() string {
	if x != nil {
		return x.ToUid
	}
	return ""
}

func (x *TransactionRecord) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *TransactionRecord) GetFeeAmount() string {
	if x != nil {
		return x.FeeAmount
	}
	return ""
}

func (x *TransactionRecord) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TransactionRecord) GetTransactionType() string {
	if x != nil {
		return x.TransactionType
	}
	return ""
}

func (x *TransactionRecord) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *TransactionRecord) GetTxTime() int64 {
	if x != nil {
		return x.TxTime
	}
	return 0
}

func (x *TransactionRecord) GetNonce() int64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *TransactionRecord) GetGasLimit() string {
	if x != nil {
		return x.GasLimit
	}
	return ""
}

func (x *TransactionRecord) GetGasUsed() string {
	if x != nil {
		return x.GasUsed
	}
	return ""
}

func (x *TransactionRecord) GetGasPrice() string {
	if x != nil {
		return x.GasPrice
	}
	return ""
}

func (x *TransactionRecord) GetBaseFee() string {
	if x != nil {
		return x.BaseFee
	}
	return ""
}

func (x *TransactionRecord) GetMaxFeePerGas() string {
	if x != nil {
		return x.MaxFeePerGas
	}
	return ""
}

func (x *TransactionRecord) GetMaxPriorityFeePerGas() string {
	if x != nil {
		return x.MaxPriorityFeePerGas
	}
	return ""
}

func (x *TransactionRecord) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *TransactionRecord) GetDappData() string {
	if x != nil {
		return x.DappData
	}
	return ""
}

func (x *TransactionRecord) GetEventLog() string {
	if x != nil {
		return x.EventLog
	}
	return ""
}

func (x *TransactionRecord) GetParseData() string {
	if x != nil {
		return x.ParseData
	}
	return ""
}

func (x *TransactionRecord) GetNetUsage() string {
	if x != nil {
		return x.NetUsage
	}
	return ""
}

func (x *TransactionRecord) GetFeeLimit() string {
	if x != nil {
		return x.FeeLimit
	}
	return ""
}

func (x *TransactionRecord) GetEnergyUsage() string {
	if x != nil {
		return x.EnergyUsage
	}
	return ""
}

func (x *TransactionRecord) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TransactionRecord) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *TransactionRecord) GetClientData() string {
	if x != nil {
		return x.ClientData
	}
	return ""
}

func (x *TransactionRecord) GetFeeData() string {
	if x != nil {
		return x.FeeData
	}
	return ""
}

func (x *TransactionRecord) GetCursor() int64 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

func (x *TransactionRecord) GetOperateType() string {
	if x != nil {
		return x.OperateType
	}
	return ""
}

func (x *TransactionRecord) GetOriginalHash() string {
	if x != nil {
		return x.OriginalHash
	}
	return ""
}

func (x *TransactionRecord) GetOperateRecordList() []*TransactionRecord {
	if x != nil {
		return x.OperateRecordList
	}
	return nil
}

func (x *TransactionRecord) GetTokenGasless() string {
	if x != nil {
		return x.TokenGasless
	}
	return ""
}

func (x *TransactionRecord) GetTokenInfo() string {
	if x != nil {
		return x.TokenInfo
	}
	return ""
}

func (x *TransactionRecord) GetSendTime() int64 {
	if x != nil {
		return x.SendTime
	}
	return 0
}

func (x *TransactionRecord) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *TransactionRecord) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *TransactionRecord) GetShortHost() string {
	if x != nil {
		return x.ShortHost
	}
	return ""
}

func (x *TransactionRecord) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *TransactionRecord) GetEventLogCount() string {
	if x != nil {
		return x.EventLogCount
	}
	return ""
}

func (x *TransactionRecord) GetPaymentId() string {
	if x != nil {
		return x.PaymentId
	}
	return ""
}

func (x *TransactionRecord) GetPayEventType() string {
	if x != nil {
		return x.PayEventType
	}
	return ""
}

type AmountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainName           string   `protobuf:"bytes,1,opt,name=chainName,proto3" json:"chainName,omitempty"` //-- 必输
	FromUid             string   `protobuf:"bytes,2,opt,name=fromUid,proto3" json:"fromUid,omitempty"`
	ToUid               string   `protobuf:"bytes,3,opt,name=toUid,proto3" json:"toUid,omitempty"`
	FromAddressList     []string `protobuf:"bytes,4,rep,name=fromAddressList,proto3" json:"fromAddressList,omitempty"`
	ToAddressList       []string `protobuf:"bytes,5,rep,name=toAddressList,proto3" json:"toAddressList,omitempty"`
	TransactionTypeList []string `protobuf:"bytes,6,rep,name=transactionTypeList,proto3" json:"transactionTypeList,omitempty"`
}

func (x *AmountRequest) Reset() {
	*x = AmountRequest{}
	mi := &file_builder_v1_transaction_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AmountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmountRequest) ProtoMessage() {}

func (x *AmountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmountRequest.ProtoReflect.Descriptor instead.
func (*AmountRequest) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{28}
}

func (x *AmountRequest) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *AmountRequest) GetFromUid() string {
	if x != nil {
		return x.FromUid
	}
	return ""
}

func (x *AmountRequest) GetToUid() string {
	if x != nil {
		return x.ToUid
	}
	return ""
}

func (x *AmountRequest) GetFromAddressList() []string {
	if x != nil {
		return x.FromAddressList
	}
	return nil
}

func (x *AmountRequest) GetToAddressList() []string {
	if x != nil {
		return x.ToAddressList
	}
	return nil
}

func (x *AmountRequest) GetTransactionTypeList() []string {
	if x != nil {
		return x.TransactionTypeList
	}
	return nil
}

type AmountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *AmountResponse) Reset() {
	*x = AmountResponse{}
	mi := &file_builder_v1_transaction_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AmountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmountResponse) ProtoMessage() {}

func (x *AmountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmountResponse.ProtoReflect.Descriptor instead.
func (*AmountResponse) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{29}
}

func (x *AmountResponse) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type PageListAssetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainName              string   `protobuf:"bytes,1,opt,name=chainName,proto3" json:"chainName,omitempty"` //-- 非必输
	Uid                    string   `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	AddressList            []string `protobuf:"bytes,3,rep,name=addressList,proto3" json:"addressList,omitempty"` // [(validate.rules).repeated = {min_items: 1}];
	TokenAddressList       []string `protobuf:"bytes,4,rep,name=tokenAddressList,proto3" json:"tokenAddressList,omitempty"`
	Currency               string   `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"` // [(validate.rules).string = {in: ["CNY", "USD"]}]; //-- 币种: CNY:人民币, USD:美元
	AmountType             int32    `protobuf:"varint,6,opt,name=amountType,proto3" json:"amountType,omitempty"`
	OrderBy                string   `protobuf:"bytes,7,opt,name=orderBy,proto3" json:"orderBy,omitempty"`
	DataDirection          int32    `protobuf:"varint,8,opt,name=dataDirection,proto3" json:"dataDirection,omitempty"`
	StartIndex             int64    `protobuf:"varint,9,opt,name=startIndex,proto3" json:"startIndex,omitempty"`
	PageNum                int32    `protobuf:"varint,10,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	PageSize               int32    `protobuf:"varint,11,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Total                  bool     `protobuf:"varint,12,opt,name=total,proto3" json:"total,omitempty"`
	AddressType            int32    `protobuf:"varint,13,opt,name=addressType,proto3" json:"addressType,omitempty"`                      //钱包类型: 0:ALL(不传默认查询所有钱包类型), 1:PERSON(个人钱包), 2:COMPANY(企业钱包), 3:COADMIN(共管钱包)
	TokenType              int32    `protobuf:"varint,14,opt,name=tokenType,proto3" json:"tokenType,omitempty"`                          //代币类型: 0:不传默认查询主币和普通代币, 1:查询主币, 2:查询普通代币
	CurrencyAmountMoreThan string   `protobuf:"bytes,15,opt,name=currencyAmountMoreThan,proto3" json:"currencyAmountMoreThan,omitempty"` //法币金额大于
}

func (x *PageListAssetRequest) Reset() {
	*x = PageListAssetRequest{}
	mi := &file_builder_v1_transaction_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PageListAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageListAssetRequest) ProtoMessage() {}

func (x *PageListAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageListAssetRequest.ProtoReflect.Descriptor instead.
func (*PageListAssetRequest) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{30}
}

func (x *PageListAssetRequest) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *PageListAssetRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *PageListAssetRequest) GetAddressList() []string {
	if x != nil {
		return x.AddressList
	}
	return nil
}

func (x *PageListAssetRequest) GetTokenAddressList() []string {
	if x != nil {
		return x.TokenAddressList
	}
	return nil
}

func (x *PageListAssetRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *PageListAssetRequest) GetAmountType() int32 {
	if x != nil {
		return x.AmountType
	}
	return 0
}

func (x *PageListAssetRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *PageListAssetRequest) GetDataDirection() int32 {
	if x != nil {
		return x.DataDirection
	}
	return 0
}

func (x *PageListAssetRequest) GetStartIndex() int64 {
	if x != nil {
		return x.StartIndex
	}
	return 0
}

func (x *PageListAssetRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *PageListAssetRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PageListAssetRequest) GetTotal() bool {
	if x != nil {
		return x.Total
	}
	return false
}

func (x *PageListAssetRequest) GetAddressType() int32 {
	if x != nil {
		return x.AddressType
	}
	return 0
}

func (x *PageListAssetRequest) GetTokenType() int32 {
	if x != nil {
		return x.TokenType
	}
	return 0
}

func (x *PageListAssetRequest) GetCurrencyAmountMoreThan() string {
	if x != nil {
		return x.CurrencyAmountMoreThan
	}
	return ""
}

type PageListAssetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total               int64            `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	TotalCurrencyAmount string           `protobuf:"bytes,2,opt,name=totalCurrencyAmount,proto3" json:"totalCurrencyAmount,omitempty"`
	List                []*AssetResponse `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *PageListAssetResponse) Reset() {
	*x = PageListAssetResponse{}
	mi := &file_builder_v1_transaction_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PageListAssetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageListAssetResponse) ProtoMessage() {}

func (x *PageListAssetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageListAssetResponse.ProtoReflect.Descriptor instead.
func (*PageListAssetResponse) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{31}
}

func (x *PageListAssetResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PageListAssetResponse) GetTotalCurrencyAmount() string {
	if x != nil {
		return x.TotalCurrencyAmount
	}
	return ""
}

func (x *PageListAssetResponse) GetList() []*AssetResponse {
	if x != nil {
		return x.List
	}
	return nil
}

type AssetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ChainName      string `protobuf:"bytes,2,opt,name=chainName,proto3" json:"chainName,omitempty"`
	Uid            string `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Address        string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	TokenAddress   string `protobuf:"bytes,5,opt,name=tokenAddress,proto3" json:"tokenAddress,omitempty"`
	Balance        string `protobuf:"bytes,6,opt,name=balance,proto3" json:"balance,omitempty"`
	Decimals       int32  `protobuf:"varint,7,opt,name=decimals,proto3" json:"decimals,omitempty"`
	Symbol         string `protobuf:"bytes,8,opt,name=symbol,proto3" json:"symbol,omitempty"`
	CurrencyAmount string `protobuf:"bytes,9,opt,name=currencyAmount,proto3" json:"currencyAmount,omitempty"`
	CreatedAt      int64  `protobuf:"varint,10,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt      int64  `protobuf:"varint,11,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Cursor         int64  `protobuf:"varint,12,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Price          string `protobuf:"bytes,13,opt,name=price,proto3" json:"price,omitempty"`
	AddressType    int32  `protobuf:"varint,14,opt,name=addressType,proto3" json:"addressType,omitempty"` //钱包类型: 1:PERSON(个人钱包), 2:COMPANY(企业钱包), 3:COADMIN(共管钱包)
	TokenUri       string `protobuf:"bytes,15,opt,name=tokenUri,proto3" json:"tokenUri,omitempty"`
	IsSyncToChain  bool   `protobuf:"varint,16,opt,name=isSyncToChain,proto3" json:"isSyncToChain,omitempty"`
	SyncToChainTs  int64  `protobuf:"varint,17,opt,name=syncToChainTs,proto3" json:"syncToChainTs,omitempty"`
}

func (x *AssetResponse) Reset() {
	*x = AssetResponse{}
	mi := &file_builder_v1_transaction_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetResponse) ProtoMessage() {}

func (x *AssetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetResponse.ProtoReflect.Descriptor instead.
func (*AssetResponse) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{32}
}

func (x *AssetResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AssetResponse) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *AssetResponse) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *AssetResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AssetResponse) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

func (x *AssetResponse) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *AssetResponse) GetDecimals() int32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *AssetResponse) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *AssetResponse) GetCurrencyAmount() string {
	if x != nil {
		return x.CurrencyAmount
	}
	return ""
}

func (x *AssetResponse) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *AssetResponse) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *AssetResponse) GetCursor() int64 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

func (x *AssetResponse) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *AssetResponse) GetAddressType() int32 {
	if x != nil {
		return x.AddressType
	}
	return 0
}

func (x *AssetResponse) GetTokenUri() string {
	if x != nil {
		return x.TokenUri
	}
	return ""
}

func (x *AssetResponse) GetIsSyncToChain() bool {
	if x != nil {
		return x.IsSyncToChain
	}
	return false
}

func (x *AssetResponse) GetSyncToChainTs() int64 {
	if x != nil {
		return x.SyncToChainTs
	}
	return 0
}

type AssetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainName        string   `protobuf:"bytes,1,opt,name=chainName,proto3" json:"chainName,omitempty"`               //-- 必输
	Address          string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`                   //-- 必输
	TokenAddressList []string `protobuf:"bytes,3,rep,name=tokenAddressList,proto3" json:"tokenAddressList,omitempty"` //-- 必输
}

func (x *AssetRequest) Reset() {
	*x = AssetRequest{}
	mi := &file_builder_v1_transaction_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetRequest) ProtoMessage() {}

func (x *AssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetRequest.ProtoReflect.Descriptor instead.
func (*AssetRequest) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{33}
}

func (x *AssetRequest) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *AssetRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AssetRequest) GetTokenAddressList() []string {
	if x != nil {
		return x.TokenAddressList
	}
	return nil
}

type ListBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*BalanceResponse `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ListBalanceResponse) Reset() {
	*x = ListBalanceResponse{}
	mi := &file_builder_v1_transaction_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBalanceResponse) ProtoMessage() {}

func (x *ListBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBalanceResponse.ProtoReflect.Descriptor instead.
func (*ListBalanceResponse) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{34}
}

func (x *ListBalanceResponse) GetList() []*BalanceResponse {
	if x != nil {
		return x.List
	}
	return nil
}

type BalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenAddress string `protobuf:"bytes,1,opt,name=tokenAddress,proto3" json:"tokenAddress,omitempty"`
	Balance      string `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *BalanceResponse) Reset() {
	*x = BalanceResponse{}
	mi := &file_builder_v1_transaction_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceResponse) ProtoMessage() {}

func (x *BalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceResponse.ProtoReflect.Descriptor instead.
func (*BalanceResponse) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{35}
}

func (x *BalanceResponse) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

func (x *BalanceResponse) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

type ListAmountUidDimensionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency  string   `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"` //-- 必输 // [(validate.rules).string = {in: ["CNY", "USD"]}]; //-- 币种: CNY:人民币, USD:美元
	UidList   []string `protobuf:"bytes,2,rep,name=uidList,proto3" json:"uidList,omitempty"`   //-- 必输
	ChainName string   `protobuf:"bytes,3,opt,name=chainName,proto3" json:"chainName,omitempty"`
}

func (x *ListAmountUidDimensionRequest) Reset() {
	*x = ListAmountUidDimensionRequest{}
	mi := &file_builder_v1_transaction_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAmountUidDimensionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAmountUidDimensionRequest) ProtoMessage() {}

func (x *ListAmountUidDimensionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAmountUidDimensionRequest.ProtoReflect.Descriptor instead.
func (*ListAmountUidDimensionRequest) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{36}
}

func (x *ListAmountUidDimensionRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ListAmountUidDimensionRequest) GetUidList() []string {
	if x != nil {
		return x.UidList
	}
	return nil
}

func (x *ListAmountUidDimensionRequest) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

type ListAmountUidDimensionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*AmountUidDimensionResponse `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ListAmountUidDimensionResponse) Reset() {
	*x = ListAmountUidDimensionResponse{}
	mi := &file_builder_v1_transaction_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAmountUidDimensionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAmountUidDimensionResponse) ProtoMessage() {}

func (x *ListAmountUidDimensionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAmountUidDimensionResponse.ProtoReflect.Descriptor instead.
func (*ListAmountUidDimensionResponse) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{37}
}

func (x *ListAmountUidDimensionResponse) GetList() []*AmountUidDimensionResponse {
	if x != nil {
		return x.List
	}
	return nil
}

type AmountUidDimensionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid            string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	CurrencyAmount string `protobuf:"bytes,2,opt,name=currencyAmount,proto3" json:"currencyAmount,omitempty"`
}

func (x *AmountUidDimensionResponse) Reset() {
	*x = AmountUidDimensionResponse{}
	mi := &file_builder_v1_transaction_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AmountUidDimensionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmountUidDimensionResponse) ProtoMessage() {}

func (x *AmountUidDimensionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmountUidDimensionResponse.ProtoReflect.Descriptor instead.
func (*AmountUidDimensionResponse) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{38}
}

func (x *AmountUidDimensionResponse) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *AmountUidDimensionResponse) GetCurrencyAmount() string {
	if x != nil {
		return x.CurrencyAmount
	}
	return ""
}

type ListHasBalanceUidDimensionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UidList []string `protobuf:"bytes,1,rep,name=uidList,proto3" json:"uidList,omitempty"` //-- 必输
}

func (x *ListHasBalanceUidDimensionRequest) Reset() {
	*x = ListHasBalanceUidDimensionRequest{}
	mi := &file_builder_v1_transaction_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHasBalanceUidDimensionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHasBalanceUidDimensionRequest) ProtoMessage() {}

func (x *ListHasBalanceUidDimensionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHasBalanceUidDimensionRequest.ProtoReflect.Descriptor instead.
func (*ListHasBalanceUidDimensionRequest) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{39}
}

func (x *ListHasBalanceUidDimensionRequest) GetUidList() []string {
	if x != nil {
		return x.UidList
	}
	return nil
}

type ListHasBalanceUidDimensionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*HasBalanceUidDimensionResponse `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ListHasBalanceUidDimensionResponse) Reset() {
	*x = ListHasBalanceUidDimensionResponse{}
	mi := &file_builder_v1_transaction_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHasBalanceUidDimensionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHasBalanceUidDimensionResponse) ProtoMessage() {}

func (x *ListHasBalanceUidDimensionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHasBalanceUidDimensionResponse.ProtoReflect.Descriptor instead.
func (*ListHasBalanceUidDimensionResponse) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{40}
}

func (x *ListHasBalanceUidDimensionResponse) GetList() []*HasBalanceUidDimensionResponse {
	if x != nil {
		return x.List
	}
	return nil
}

type HasBalanceUidDimensionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	HasBalance bool   `protobuf:"varint,2,opt,name=hasBalance,proto3" json:"hasBalance,omitempty"`
}

func (x *HasBalanceUidDimensionResponse) Reset() {
	*x = HasBalanceUidDimensionResponse{}
	mi := &file_builder_v1_transaction_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HasBalanceUidDimensionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasBalanceUidDimensionResponse) ProtoMessage() {}

func (x *HasBalanceUidDimensionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasBalanceUidDimensionResponse.ProtoReflect.Descriptor instead.
func (*HasBalanceUidDimensionResponse) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{41}
}

func (x *HasBalanceUidDimensionResponse) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *HasBalanceUidDimensionResponse) GetHasBalance() bool {
	if x != nil {
		return x.HasBalance
	}
	return false
}

type ListHasBalanceDimensionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainName   string   `protobuf:"bytes,1,opt,name=chainName,proto3" json:"chainName,omitempty"`
	UidList     []string `protobuf:"bytes,2,rep,name=uidList,proto3" json:"uidList,omitempty"`
	AddressList []string `protobuf:"bytes,3,rep,name=addressList,proto3" json:"addressList,omitempty"`
	GroupBy     string   `protobuf:"bytes,4,opt,name=groupBy,proto3" json:"groupBy,omitempty"`
}

func (x *ListHasBalanceDimensionRequest) Reset() {
	*x = ListHasBalanceDimensionRequest{}
	mi := &file_builder_v1_transaction_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHasBalanceDimensionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHasBalanceDimensionRequest) ProtoMessage() {}

func (x *ListHasBalanceDimensionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHasBalanceDimensionRequest.ProtoReflect.Descriptor instead.
func (*ListHasBalanceDimensionRequest) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{42}
}

func (x *ListHasBalanceDimensionRequest) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *ListHasBalanceDimensionRequest) GetUidList() []string {
	if x != nil {
		return x.UidList
	}
	return nil
}

func (x *ListHasBalanceDimensionRequest) GetAddressList() []string {
	if x != nil {
		return x.AddressList
	}
	return nil
}

func (x *ListHasBalanceDimensionRequest) GetGroupBy() string {
	if x != nil {
		return x.GroupBy
	}
	return ""
}

type ListHasBalanceDimensionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*HasBalanceDimensionResponse `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ListHasBalanceDimensionResponse) Reset() {
	*x = ListHasBalanceDimensionResponse{}
	mi := &file_builder_v1_transaction_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHasBalanceDimensionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHasBalanceDimensionResponse) ProtoMessage() {}

func (x *ListHasBalanceDimensionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHasBalanceDimensionResponse.ProtoReflect.Descriptor instead.
func (*ListHasBalanceDimensionResponse) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{43}
}

func (x *ListHasBalanceDimensionResponse) GetList() []*HasBalanceDimensionResponse {
	if x != nil {
		return x.List
	}
	return nil
}

type HasBalanceDimensionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column     string `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	HasBalance bool   `protobuf:"varint,2,opt,name=hasBalance,proto3" json:"hasBalance,omitempty"`
}

func (x *HasBalanceDimensionResponse) Reset() {
	*x = HasBalanceDimensionResponse{}
	mi := &file_builder_v1_transaction_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HasBalanceDimensionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasBalanceDimensionResponse) ProtoMessage() {}

func (x *HasBalanceDimensionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasBalanceDimensionResponse.ProtoReflect.Descriptor instead.
func (*HasBalanceDimensionResponse) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{44}
}

func (x *HasBalanceDimensionResponse) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *HasBalanceDimensionResponse) GetHasBalance() bool {
	if x != nil {
		return x.HasBalance
	}
	return false
}

type AssetHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainName   string `protobuf:"bytes,1,opt,name=chainName,proto3" json:"chainName,omitempty"`      //-- 非必输
	AddressType int32  `protobuf:"varint,2,opt,name=addressType,proto3" json:"addressType,omitempty"` //钱包类型: 0:ALL(不传默认查询所有钱包类型), 1:PERSON(个人钱包), 2:COMPANY(企业钱包), 3:COADMIN(共管钱包)
	StartTime   int64  `protobuf:"varint,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	StopTime    int64  `protobuf:"varint,4,opt,name=stopTime,proto3" json:"stopTime,omitempty"`
}

func (x *AssetHistoryRequest) Reset() {
	*x = AssetHistoryRequest{}
	mi := &file_builder_v1_transaction_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetHistoryRequest) ProtoMessage() {}

func (x *AssetHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetHistoryRequest.ProtoReflect.Descriptor instead.
func (*AssetHistoryRequest) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{45}
}

func (x *AssetHistoryRequest) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *AssetHistoryRequest) GetAddressType() int32 {
	if x != nil {
		return x.AddressType
	}
	return 0
}

func (x *AssetHistoryRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *AssetHistoryRequest) GetStopTime() int64 {
	if x != nil {
		return x.StopTime
	}
	return 0
}

type AssetHistoryFundAmountListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*AssetHistoryFundAmountResponse `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *AssetHistoryFundAmountListResponse) Reset() {
	*x = AssetHistoryFundAmountListResponse{}
	mi := &file_builder_v1_transaction_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetHistoryFundAmountListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetHistoryFundAmountListResponse) ProtoMessage() {}

func (x *AssetHistoryFundAmountListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetHistoryFundAmountListResponse.ProtoReflect.Descriptor instead.
func (*AssetHistoryFundAmountListResponse) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{46}
}

func (x *AssetHistoryFundAmountListResponse) GetList() []*AssetHistoryFundAmountResponse {
	if x != nil {
		return x.List
	}
	return nil
}

type AssetHistoryFundAmountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CnyAmount string `protobuf:"bytes,1,opt,name=cnyAmount,proto3" json:"cnyAmount,omitempty"`
	UsdAmount string `protobuf:"bytes,2,opt,name=usdAmount,proto3" json:"usdAmount,omitempty"`
	Dt        int64  `protobuf:"varint,3,opt,name=dt,proto3" json:"dt,omitempty"`
	BtcAmount string `protobuf:"bytes,4,opt,name=btcAmount,proto3" json:"btcAmount,omitempty"`
}

func (x *AssetHistoryFundAmountResponse) Reset() {
	*x = AssetHistoryFundAmountResponse{}
	mi := &file_builder_v1_transaction_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetHistoryFundAmountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetHistoryFundAmountResponse) ProtoMessage() {}

func (x *AssetHistoryFundAmountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetHistoryFundAmountResponse.ProtoReflect.Descriptor instead.
func (*AssetHistoryFundAmountResponse) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{47}
}

func (x *AssetHistoryFundAmountResponse) GetCnyAmount() string {
	if x != nil {
		return x.CnyAmount
	}
	return ""
}

func (x *AssetHistoryFundAmountResponse) GetUsdAmount() string {
	if x != nil {
		return x.UsdAmount
	}
	return ""
}

func (x *AssetHistoryFundAmountResponse) GetDt() int64 {
	if x != nil {
		return x.Dt
	}
	return 0
}

func (x *AssetHistoryFundAmountResponse) GetBtcAmount() string {
	if x != nil {
		return x.BtcAmount
	}
	return ""
}

type AssetHistoryAddressAmountListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*AssetHistoryAddressAmountResponse `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *AssetHistoryAddressAmountListResponse) Reset() {
	*x = AssetHistoryAddressAmountListResponse{}
	mi := &file_builder_v1_transaction_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetHistoryAddressAmountListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetHistoryAddressAmountListResponse) ProtoMessage() {}

func (x *AssetHistoryAddressAmountListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetHistoryAddressAmountListResponse.ProtoReflect.Descriptor instead.
func (*AssetHistoryAddressAmountListResponse) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{48}
}

func (x *AssetHistoryAddressAmountListResponse) GetList() []*AssetHistoryAddressAmountResponse {
	if x != nil {
		return x.List
	}
	return nil
}

type AssetHistoryAddressAmountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressAmount int64 `protobuf:"varint,1,opt,name=addressAmount,proto3" json:"addressAmount,omitempty"`
	Dt            int64 `protobuf:"varint,2,opt,name=dt,proto3" json:"dt,omitempty"`
}

func (x *AssetHistoryAddressAmountResponse) Reset() {
	*x = AssetHistoryAddressAmountResponse{}
	mi := &file_builder_v1_transaction_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetHistoryAddressAmountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetHistoryAddressAmountResponse) ProtoMessage() {}

func (x *AssetHistoryAddressAmountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetHistoryAddressAmountResponse.ProtoReflect.Descriptor instead.
func (*AssetHistoryAddressAmountResponse) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{49}
}

func (x *AssetHistoryAddressAmountResponse) GetAddressAmount() int64 {
	if x != nil {
		return x.AddressAmount
	}
	return 0
}

func (x *AssetHistoryAddressAmountResponse) GetDt() int64 {
	if x != nil {
		return x.Dt
	}
	return 0
}

type PageListNftAssetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainName                    string   `protobuf:"bytes,1,opt,name=chainName,proto3" json:"chainName,omitempty"` //-- 非必输
	Uid                          string   `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	AddressList                  []string `protobuf:"bytes,3,rep,name=addressList,proto3" json:"addressList,omitempty"` // [(validate.rules).repeated = {min_items: 1}];
	TokenAddressList             []string `protobuf:"bytes,4,rep,name=tokenAddressList,proto3" json:"tokenAddressList,omitempty"`
	TokenIdList                  []string `protobuf:"bytes,5,rep,name=tokenIdList,proto3" json:"tokenIdList,omitempty"`
	Currency                     string   `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"` // [(validate.rules).string = {in: ["CNY", "USD"]}]; //-- 币种: CNY:人民币, USD:美元
	AmountType                   int32    `protobuf:"varint,7,opt,name=amountType,proto3" json:"amountType,omitempty"`
	CollectionNameLike           string   `protobuf:"bytes,8,opt,name=collectionNameLike,proto3" json:"collectionNameLike,omitempty"`
	OrderBy                      string   `protobuf:"bytes,9,opt,name=orderBy,proto3" json:"orderBy,omitempty"`
	DataDirection                int32    `protobuf:"varint,10,opt,name=dataDirection,proto3" json:"dataDirection,omitempty"`
	StartIndex                   int64    `protobuf:"varint,11,opt,name=startIndex,proto3" json:"startIndex,omitempty"`
	PageNum                      int32    `protobuf:"varint,12,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	PageSize                     int32    `protobuf:"varint,13,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Total                        bool     `protobuf:"varint,14,opt,name=total,proto3" json:"total,omitempty"`
	CollectionNameLikeIgnoreCase string   `protobuf:"bytes,15,opt,name=collectionNameLikeIgnoreCase,proto3" json:"collectionNameLikeIgnoreCase,omitempty"`
	NameLikeIgnoreCase           string   `protobuf:"bytes,16,opt,name=nameLikeIgnoreCase,proto3" json:"nameLikeIgnoreCase,omitempty"`
}

func (x *PageListNftAssetRequest) Reset() {
	*x = PageListNftAssetRequest{}
	mi := &file_builder_v1_transaction_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PageListNftAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageListNftAssetRequest) ProtoMessage() {}

func (x *PageListNftAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageListNftAssetRequest.ProtoReflect.Descriptor instead.
func (*PageListNftAssetRequest) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{50}
}

func (x *PageListNftAssetRequest) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *PageListNftAssetRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *PageListNftAssetRequest) GetAddressList() []string {
	if x != nil {
		return x.AddressList
	}
	return nil
}

func (x *PageListNftAssetRequest) GetTokenAddressList() []string {
	if x != nil {
		return x.TokenAddressList
	}
	return nil
}

func (x *PageListNftAssetRequest) GetTokenIdList() []string {
	if x != nil {
		return x.TokenIdList
	}
	return nil
}

func (x *PageListNftAssetRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *PageListNftAssetRequest) GetAmountType() int32 {
	if x != nil {
		return x.AmountType
	}
	return 0
}

func (x *PageListNftAssetRequest) GetCollectionNameLike() string {
	if x != nil {
		return x.CollectionNameLike
	}
	return ""
}

func (x *PageListNftAssetRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *PageListNftAssetRequest) GetDataDirection() int32 {
	if x != nil {
		return x.DataDirection
	}
	return 0
}

func (x *PageListNftAssetRequest) GetStartIndex() int64 {
	if x != nil {
		return x.StartIndex
	}
	return 0
}

func (x *PageListNftAssetRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *PageListNftAssetRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PageListNftAssetRequest) GetTotal() bool {
	if x != nil {
		return x.Total
	}
	return false
}

func (x *PageListNftAssetRequest) GetCollectionNameLikeIgnoreCase() string {
	if x != nil {
		return x.CollectionNameLikeIgnoreCase
	}
	return ""
}

func (x *PageListNftAssetRequest) GetNameLikeIgnoreCase() string {
	if x != nil {
		return x.NameLikeIgnoreCase
	}
	return ""
}

type ClientPageListNftAssetGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total        int64                          `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List         []*ClientNftAssetGroupResponse `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	TotalBalance int64                          `protobuf:"varint,3,opt,name=totalBalance,proto3" json:"totalBalance,omitempty"`
}

func (x *ClientPageListNftAssetGroupResponse) Reset() {
	*x = ClientPageListNftAssetGroupResponse{}
	mi := &file_builder_v1_transaction_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientPageListNftAssetGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientPageListNftAssetGroupResponse) ProtoMessage() {}

func (x *ClientPageListNftAssetGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientPageListNftAssetGroupResponse.ProtoReflect.Descriptor instead.
func (*ClientPageListNftAssetGroupResponse) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{51}
}

func (x *ClientPageListNftAssetGroupResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ClientPageListNftAssetGroupResponse) GetList() []*ClientNftAssetGroupResponse {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ClientPageListNftAssetGroupResponse) GetTotalBalance() int64 {
	if x != nil {
		return x.TotalBalance
	}
	return 0
}

type ClientNftAssetGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainName      string `protobuf:"bytes,1,opt,name=chainName,proto3" json:"chainName,omitempty"`
	Uid            string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Address        string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	TokenAddress   string `protobuf:"bytes,4,opt,name=tokenAddress,proto3" json:"tokenAddress,omitempty"`
	TokenUri       string `protobuf:"bytes,5,opt,name=tokenUri,proto3" json:"tokenUri,omitempty"`
	Balance        string `protobuf:"bytes,6,opt,name=balance,proto3" json:"balance,omitempty"`
	TokenType      string `protobuf:"bytes,7,opt,name=tokenType,proto3" json:"tokenType,omitempty"`
	CollectionName string `protobuf:"bytes,8,opt,name=collectionName,proto3" json:"collectionName,omitempty"`
	TokenIdAmount  int64  `protobuf:"varint,9,opt,name=tokenIdAmount,proto3" json:"tokenIdAmount,omitempty"`
	Cursor         int64  `protobuf:"varint,10,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *ClientNftAssetGroupResponse) Reset() {
	*x = ClientNftAssetGroupResponse{}
	mi := &file_builder_v1_transaction_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientNftAssetGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientNftAssetGroupResponse) ProtoMessage() {}

func (x *ClientNftAssetGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientNftAssetGroupResponse.ProtoReflect.Descriptor instead.
func (*ClientNftAssetGroupResponse) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{52}
}

func (x *ClientNftAssetGroupResponse) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *ClientNftAssetGroupResponse) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ClientNftAssetGroupResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ClientNftAssetGroupResponse) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

func (x *ClientNftAssetGroupResponse) GetTokenUri() string {
	if x != nil {
		return x.TokenUri
	}
	return ""
}

func (x *ClientNftAssetGroupResponse) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *ClientNftAssetGroupResponse) GetTokenType() string {
	if x != nil {
		return x.TokenType
	}
	return ""
}

func (x *ClientNftAssetGroupResponse) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *ClientNftAssetGroupResponse) GetTokenIdAmount() int64 {
	if x != nil {
		return x.TokenIdAmount
	}
	return 0
}

func (x *ClientNftAssetGroupResponse) GetCursor() int64 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

type ClientPageListNftAssetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                     `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*ClientNftAssetResponse `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ClientPageListNftAssetResponse) Reset() {
	*x = ClientPageListNftAssetResponse{}
	mi := &file_builder_v1_transaction_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientPageListNftAssetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientPageListNftAssetResponse) ProtoMessage() {}

func (x *ClientPageListNftAssetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientPageListNftAssetResponse.ProtoReflect.Descriptor instead.
func (*ClientPageListNftAssetResponse) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{53}
}

func (x *ClientPageListNftAssetResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ClientPageListNftAssetResponse) GetList() []*ClientNftAssetResponse {
	if x != nil {
		return x.List
	}
	return nil
}

type ClientNftAssetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ChainName        string `protobuf:"bytes,2,opt,name=chainName,proto3" json:"chainName,omitempty"`
	Uid              string `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Address          string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	TokenAddress     string `protobuf:"bytes,5,opt,name=tokenAddress,proto3" json:"tokenAddress,omitempty"`
	TokenUri         string `protobuf:"bytes,6,opt,name=tokenUri,proto3" json:"tokenUri,omitempty"`
	TokenId          string `protobuf:"bytes,7,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Balance          string `protobuf:"bytes,8,opt,name=balance,proto3" json:"balance,omitempty"`
	TokenType        string `protobuf:"bytes,9,opt,name=tokenType,proto3" json:"tokenType,omitempty"`
	CollectionName   string `protobuf:"bytes,10,opt,name=collectionName,proto3" json:"collectionName,omitempty"`
	Symbol           string `protobuf:"bytes,11,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Name             string `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
	ItemName         string `protobuf:"bytes,13,opt,name=itemName,proto3" json:"itemName,omitempty"`
	ItemUri          string `protobuf:"bytes,14,opt,name=itemUri,proto3" json:"itemUri,omitempty"`
	ItemOriginalUri  string `protobuf:"bytes,15,opt,name=itemOriginalUri,proto3" json:"itemOriginalUri,omitempty"`
	ItemAnimationUri string `protobuf:"bytes,16,opt,name=itemAnimationUri,proto3" json:"itemAnimationUri,omitempty"`
	Data             string `protobuf:"bytes,17,opt,name=data,proto3" json:"data,omitempty"`
	CreatedAt        int64  `protobuf:"varint,18,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt        int64  `protobuf:"varint,19,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Cursor           int64  `protobuf:"varint,20,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *ClientNftAssetResponse) Reset() {
	*x = ClientNftAssetResponse{}
	mi := &file_builder_v1_transaction_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientNftAssetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientNftAssetResponse) ProtoMessage() {}

func (x *ClientNftAssetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientNftAssetResponse.ProtoReflect.Descriptor instead.
func (*ClientNftAssetResponse) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{54}
}

func (x *ClientNftAssetResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClientNftAssetResponse) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *ClientNftAssetResponse) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ClientNftAssetResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ClientNftAssetResponse) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

func (x *ClientNftAssetResponse) GetTokenUri() string {
	if x != nil {
		return x.TokenUri
	}
	return ""
}

func (x *ClientNftAssetResponse) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *ClientNftAssetResponse) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *ClientNftAssetResponse) GetTokenType() string {
	if x != nil {
		return x.TokenType
	}
	return ""
}

func (x *ClientNftAssetResponse) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *ClientNftAssetResponse) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *ClientNftAssetResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClientNftAssetResponse) GetItemName() string {
	if x != nil {
		return x.ItemName
	}
	return ""
}

func (x *ClientNftAssetResponse) GetItemUri() string {
	if x != nil {
		return x.ItemUri
	}
	return ""
}

func (x *ClientNftAssetResponse) GetItemOriginalUri() string {
	if x != nil {
		return x.ItemOriginalUri
	}
	return ""
}

func (x *ClientNftAssetResponse) GetItemAnimationUri() string {
	if x != nil {
		return x.ItemAnimationUri
	}
	return ""
}

func (x *ClientNftAssetResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *ClientNftAssetResponse) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ClientNftAssetResponse) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *ClientNftAssetResponse) GetCursor() int64 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

type NftAssetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainName    string `protobuf:"bytes,1,opt,name=chainName,proto3" json:"chainName,omitempty"`       //-- 必输
	Address      string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`           //-- 必输
	TokenAddress string `protobuf:"bytes,3,opt,name=tokenAddress,proto3" json:"tokenAddress,omitempty"` //-- 必输
	TokenId      string `protobuf:"bytes,4,opt,name=tokenId,proto3" json:"tokenId,omitempty"`           //-- 必输
}

func (x *NftAssetRequest) Reset() {
	*x = NftAssetRequest{}
	mi := &file_builder_v1_transaction_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NftAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NftAssetRequest) ProtoMessage() {}

func (x *NftAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NftAssetRequest.ProtoReflect.Descriptor instead.
func (*NftAssetRequest) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{55}
}

func (x *NftAssetRequest) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *NftAssetRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *NftAssetRequest) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

func (x *NftAssetRequest) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

type NftBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance string `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *NftBalanceResponse) Reset() {
	*x = NftBalanceResponse{}
	mi := &file_builder_v1_transaction_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NftBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NftBalanceResponse) ProtoMessage() {}

func (x *NftBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NftBalanceResponse.ProtoReflect.Descriptor instead.
func (*NftBalanceResponse) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{56}
}

func (x *NftBalanceResponse) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

type PageListStatisticRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainName         string  `protobuf:"bytes,1,opt,name=chainName,proto3" json:"chainName,omitempty"` //-- 非必输
	FundDirectionList []int32 `protobuf:"varint,2,rep,packed,name=fundDirectionList,proto3" json:"fundDirectionList,omitempty"`
	TokenAddress      string  `protobuf:"bytes,3,opt,name=tokenAddress,proto3" json:"tokenAddress,omitempty"`
	StartTime         int64   `protobuf:"varint,4,opt,name=startTime,proto3" json:"startTime,omitempty"`
	StopTime          int64   `protobuf:"varint,5,opt,name=stopTime,proto3" json:"stopTime,omitempty"`
	OrderBy           string  `protobuf:"bytes,6,opt,name=orderBy,proto3" json:"orderBy,omitempty"`
	DataDirection     int32   `protobuf:"varint,7,opt,name=dataDirection,proto3" json:"dataDirection,omitempty"`
	StartIndex        int64   `protobuf:"varint,8,opt,name=startIndex,proto3" json:"startIndex,omitempty"`
	PageNum           int32   `protobuf:"varint,9,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	PageSize          int32   `protobuf:"varint,10,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Total             bool    `protobuf:"varint,11,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *PageListStatisticRequest) Reset() {
	*x = PageListStatisticRequest{}
	mi := &file_builder_v1_transaction_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PageListStatisticRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageListStatisticRequest) ProtoMessage() {}

func (x *PageListStatisticRequest) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageListStatisticRequest.ProtoReflect.Descriptor instead.
func (*PageListStatisticRequest) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{57}
}

func (x *PageListStatisticRequest) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *PageListStatisticRequest) GetFundDirectionList() []int32 {
	if x != nil {
		return x.FundDirectionList
	}
	return nil
}

func (x *PageListStatisticRequest) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

func (x *PageListStatisticRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *PageListStatisticRequest) GetStopTime() int64 {
	if x != nil {
		return x.StopTime
	}
	return 0
}

func (x *PageListStatisticRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *PageListStatisticRequest) GetDataDirection() int32 {
	if x != nil {
		return x.DataDirection
	}
	return 0
}

func (x *PageListStatisticRequest) GetStartIndex() int64 {
	if x != nil {
		return x.StartIndex
	}
	return 0
}

func (x *PageListStatisticRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *PageListStatisticRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PageListStatisticRequest) GetTotal() bool {
	if x != nil {
		return x.Total
	}
	return false
}

type PageListStatisticResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*StatisticResponse `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *PageListStatisticResponse) Reset() {
	*x = PageListStatisticResponse{}
	mi := &file_builder_v1_transaction_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PageListStatisticResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageListStatisticResponse) ProtoMessage() {}

func (x *PageListStatisticResponse) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageListStatisticResponse.ProtoReflect.Descriptor instead.
func (*PageListStatisticResponse) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{58}
}

func (x *PageListStatisticResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PageListStatisticResponse) GetList() []*StatisticResponse {
	if x != nil {
		return x.List
	}
	return nil
}

type StatisticResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ChainName           string `protobuf:"bytes,2,opt,name=chainName,proto3" json:"chainName,omitempty"`
	TokenAddress        string `protobuf:"bytes,3,opt,name=tokenAddress,proto3" json:"tokenAddress,omitempty"`
	FundDirection       int32  `protobuf:"varint,4,opt,name=fundDirection,proto3" json:"fundDirection,omitempty"`
	FundType            int32  `protobuf:"varint,5,opt,name=fundType,proto3" json:"fundType,omitempty"`
	TransactionQuantity int64  `protobuf:"varint,6,opt,name=transactionQuantity,proto3" json:"transactionQuantity,omitempty"`
	Amount              string `protobuf:"bytes,7,opt,name=amount,proto3" json:"amount,omitempty"`
	CnyAmount           string `protobuf:"bytes,8,opt,name=cnyAmount,proto3" json:"cnyAmount,omitempty"`
	UsdAmount           string `protobuf:"bytes,9,opt,name=usdAmount,proto3" json:"usdAmount,omitempty"`
	Dt                  int64  `protobuf:"varint,10,opt,name=dt,proto3" json:"dt,omitempty"`
	CreatedAt           int64  `protobuf:"varint,11,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt           int64  `protobuf:"varint,12,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Cursor              int64  `protobuf:"varint,13,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *StatisticResponse) Reset() {
	*x = StatisticResponse{}
	mi := &file_builder_v1_transaction_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatisticResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticResponse) ProtoMessage() {}

func (x *StatisticResponse) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticResponse.ProtoReflect.Descriptor instead.
func (*StatisticResponse) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{59}
}

func (x *StatisticResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StatisticResponse) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *StatisticResponse) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

func (x *StatisticResponse) GetFundDirection() int32 {
	if x != nil {
		return x.FundDirection
	}
	return 0
}

func (x *StatisticResponse) GetFundType() int32 {
	if x != nil {
		return x.FundType
	}
	return 0
}

func (x *StatisticResponse) GetTransactionQuantity() int64 {
	if x != nil {
		return x.TransactionQuantity
	}
	return 0
}

func (x *StatisticResponse) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *StatisticResponse) GetCnyAmount() string {
	if x != nil {
		return x.CnyAmount
	}
	return ""
}

func (x *StatisticResponse) GetUsdAmount() string {
	if x != nil {
		return x.UsdAmount
	}
	return ""
}

func (x *StatisticResponse) GetDt() int64 {
	if x != nil {
		return x.Dt
	}
	return 0
}

func (x *StatisticResponse) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *StatisticResponse) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *StatisticResponse) GetCursor() int64 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

type StatisticFundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainName         string  `protobuf:"bytes,1,opt,name=chainName,proto3" json:"chainName,omitempty"` //-- 非必输
	FundDirectionList []int32 `protobuf:"varint,2,rep,packed,name=fundDirectionList,proto3" json:"fundDirectionList,omitempty"`
	StartTime         int64   `protobuf:"varint,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	StopTime          int64   `protobuf:"varint,4,opt,name=stopTime,proto3" json:"stopTime,omitempty"`
}

func (x *StatisticFundRequest) Reset() {
	*x = StatisticFundRequest{}
	mi := &file_builder_v1_transaction_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatisticFundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticFundRequest) ProtoMessage() {}

func (x *StatisticFundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticFundRequest.ProtoReflect.Descriptor instead.
func (*StatisticFundRequest) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{60}
}

func (x *StatisticFundRequest) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *StatisticFundRequest) GetFundDirectionList() []int32 {
	if x != nil {
		return x.FundDirectionList
	}
	return nil
}

func (x *StatisticFundRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *StatisticFundRequest) GetStopTime() int64 {
	if x != nil {
		return x.StopTime
	}
	return 0
}

type FundAmountListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*FundAmountResponse `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *FundAmountListResponse) Reset() {
	*x = FundAmountListResponse{}
	mi := &file_builder_v1_transaction_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FundAmountListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundAmountListResponse) ProtoMessage() {}

func (x *FundAmountListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundAmountListResponse.ProtoReflect.Descriptor instead.
func (*FundAmountListResponse) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{61}
}

func (x *FundAmountListResponse) GetList() []*FundAmountResponse {
	if x != nil {
		return x.List
	}
	return nil
}

type FundAmountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FundDirection       int32  `protobuf:"varint,1,opt,name=fundDirection,proto3" json:"fundDirection,omitempty"`
	TransactionQuantity string `protobuf:"bytes,2,opt,name=transactionQuantity,proto3" json:"transactionQuantity,omitempty"`
	Amount              string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	CnyAmount           string `protobuf:"bytes,4,opt,name=cnyAmount,proto3" json:"cnyAmount,omitempty"`
	UsdAmount           string `protobuf:"bytes,5,opt,name=usdAmount,proto3" json:"usdAmount,omitempty"`
	Dt                  int64  `protobuf:"varint,6,opt,name=dt,proto3" json:"dt,omitempty"`
}

func (x *FundAmountResponse) Reset() {
	*x = FundAmountResponse{}
	mi := &file_builder_v1_transaction_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FundAmountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundAmountResponse) ProtoMessage() {}

func (x *FundAmountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundAmountResponse.ProtoReflect.Descriptor instead.
func (*FundAmountResponse) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{62}
}

func (x *FundAmountResponse) GetFundDirection() int32 {
	if x != nil {
		return x.FundDirection
	}
	return 0
}

func (x *FundAmountResponse) GetTransactionQuantity() string {
	if x != nil {
		return x.TransactionQuantity
	}
	return ""
}

func (x *FundAmountResponse) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *FundAmountResponse) GetCnyAmount() string {
	if x != nil {
		return x.CnyAmount
	}
	return ""
}

func (x *FundAmountResponse) GetUsdAmount() string {
	if x != nil {
		return x.UsdAmount
	}
	return ""
}

func (x *FundAmountResponse) GetDt() int64 {
	if x != nil {
		return x.Dt
	}
	return 0
}

type FundRateListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*FundRateResponse `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *FundRateListResponse) Reset() {
	*x = FundRateListResponse{}
	mi := &file_builder_v1_transaction_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FundRateListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundRateListResponse) ProtoMessage() {}

func (x *FundRateListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundRateListResponse.ProtoReflect.Descriptor instead.
func (*FundRateListResponse) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{63}
}

func (x *FundRateListResponse) GetList() []*FundRateResponse {
	if x != nil {
		return x.List
	}
	return nil
}

type FundRateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FundDirection       int32  `protobuf:"varint,1,opt,name=fundDirection,proto3" json:"fundDirection,omitempty"`
	FundType            int32  `protobuf:"varint,2,opt,name=fundType,proto3" json:"fundType,omitempty"`
	TransactionQuantity string `protobuf:"bytes,3,opt,name=transactionQuantity,proto3" json:"transactionQuantity,omitempty"`
	Amount              string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	CnyAmount           string `protobuf:"bytes,5,opt,name=cnyAmount,proto3" json:"cnyAmount,omitempty"`
	UsdAmount           string `protobuf:"bytes,6,opt,name=usdAmount,proto3" json:"usdAmount,omitempty"`
	Rate                string `protobuf:"bytes,7,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (x *FundRateResponse) Reset() {
	*x = FundRateResponse{}
	mi := &file_builder_v1_transaction_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FundRateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundRateResponse) ProtoMessage() {}

func (x *FundRateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundRateResponse.ProtoReflect.Descriptor instead.
func (*FundRateResponse) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{64}
}

func (x *FundRateResponse) GetFundDirection() int32 {
	if x != nil {
		return x.FundDirection
	}
	return 0
}

func (x *FundRateResponse) GetFundType() int32 {
	if x != nil {
		return x.FundType
	}
	return 0
}

func (x *FundRateResponse) GetTransactionQuantity() string {
	if x != nil {
		return x.TransactionQuantity
	}
	return ""
}

func (x *FundRateResponse) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *FundRateResponse) GetCnyAmount() string {
	if x != nil {
		return x.CnyAmount
	}
	return ""
}

func (x *FundRateResponse) GetUsdAmount() string {
	if x != nil {
		return x.UsdAmount
	}
	return ""
}

func (x *FundRateResponse) GetRate() string {
	if x != nil {
		return x.Rate
	}
	return ""
}

type KanbanSummaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainName string `protobuf:"bytes,1,opt,name=chainName,proto3" json:"chainName,omitempty"`
	Address   string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Uid       string `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *KanbanSummaryRequest) Reset() {
	*x = KanbanSummaryRequest{}
	mi := &file_builder_v1_transaction_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KanbanSummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KanbanSummaryRequest) ProtoMessage() {}

func (x *KanbanSummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KanbanSummaryRequest.ProtoReflect.Descriptor instead.
func (*KanbanSummaryRequest) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{65}
}

func (x *KanbanSummaryRequest) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *KanbanSummaryRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *KanbanSummaryRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type KanbanRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopPercent int32  `protobuf:"varint,1,opt,name=topPercent,proto3" json:"topPercent,omitempty"` //10 即为前 10%
	LowerBound string `protobuf:"bytes,2,opt,name=lowerBound,proto3" json:"lowerBound,omitempty"`  // 当前排名的下界，大于等于此值且小于更高排名区间的下界则位于当前排名区间
}

func (x *KanbanRank) Reset() {
	*x = KanbanRank{}
	mi := &file_builder_v1_transaction_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KanbanRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KanbanRank) ProtoMessage() {}

func (x *KanbanRank) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KanbanRank.ProtoReflect.Descriptor instead.
func (*KanbanRank) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{66}
}

func (x *KanbanRank) GetTopPercent() int32 {
	if x != nil {
		return x.TopPercent
	}
	return 0
}

func (x *KanbanRank) GetLowerBound() string {
	if x != nil {
		return x.LowerBound
	}
	return ""
}

type KanbanTopPercent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalTx         int32 `protobuf:"varint,1,opt,name=totalTx,proto3" json:"totalTx,omitempty"`                 // 总交易数
	TotalTxAmount   int32 `protobuf:"varint,2,opt,name=totalTxAmount,proto3" json:"totalTxAmount,omitempty"`     // 总交易金额
	TotalContract   int32 `protobuf:"varint,3,opt,name=totalContract,proto3" json:"totalContract,omitempty"`     // 交互合约数
	TotalTxInAmount int32 `protobuf:"varint,4,opt,name=totalTxInAmount,proto3" json:"totalTxInAmount,omitempty"` // 总转入金额
}

func (x *KanbanTopPercent) Reset() {
	*x = KanbanTopPercent{}
	mi := &file_builder_v1_transaction_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KanbanTopPercent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KanbanTopPercent) ProtoMessage() {}

func (x *KanbanTopPercent) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KanbanTopPercent.ProtoReflect.Descriptor instead.
func (*KanbanTopPercent) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{67}
}

func (x *KanbanTopPercent) GetTotalTx() int32 {
	if x != nil {
		return x.TotalTx
	}
	return 0
}

func (x *KanbanTopPercent) GetTotalTxAmount() int32 {
	if x != nil {
		return x.TotalTxAmount
	}
	return 0
}

func (x *KanbanTopPercent) GetTotalContract() int32 {
	if x != nil {
		return x.TotalContract
	}
	return 0
}

func (x *KanbanTopPercent) GetTotalTxInAmount() int32 {
	if x != nil {
		return x.TotalTxInAmount
	}
	return 0
}

type KanbanSummaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstTxTime          uint64            `protobuf:"varint,1,opt,name=firstTxTime,proto3" json:"firstTxTime,omitempty"`        // UTC
	TotalTxNum           uint64            `protobuf:"varint,2,opt,name=totalTxNum,proto3" json:"totalTxNum,omitempty"`          // 总交易次数
	TotalTxAmount        string            `protobuf:"bytes,3,opt,name=totalTxAmount,proto3" json:"totalTxAmount,omitempty"`     // 总交易额
	TotalContract        uint64            `protobuf:"varint,4,opt,name=totalContract,proto3" json:"totalContract,omitempty"`    // 交互合约数
	TotalTxInAmount      string            `protobuf:"bytes,5,opt,name=totalTxInAmount,proto3" json:"totalTxInAmount,omitempty"` // 总转入金额
	TotalTxsRanks        []*KanbanRank     `protobuf:"bytes,6,rep,name=totalTxsRanks,proto3" json:"totalTxsRanks,omitempty"`
	TotalTxAmountRanks   []*KanbanRank     `protobuf:"bytes,7,rep,name=totalTxAmountRanks,proto3" json:"totalTxAmountRanks,omitempty"`
	TotalContractRanks   []*KanbanRank     `protobuf:"bytes,8,rep,name=totalContractRanks,proto3" json:"totalContractRanks,omitempty"`
	TotalTxInAmountRanks []*KanbanRank     `protobuf:"bytes,9,rep,name=totalTxInAmountRanks,proto3" json:"totalTxInAmountRanks,omitempty"`
	TopPercents          *KanbanTopPercent `protobuf:"bytes,10,opt,name=topPercents,proto3,oneof" json:"topPercents,omitempty"`
}

func (x *KanbanSummaryResponse) Reset() {
	*x = KanbanSummaryResponse{}
	mi := &file_builder_v1_transaction_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KanbanSummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KanbanSummaryResponse) ProtoMessage() {}

func (x *KanbanSummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KanbanSummaryResponse.ProtoReflect.Descriptor instead.
func (*KanbanSummaryResponse) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{68}
}

func (x *KanbanSummaryResponse) GetFirstTxTime() uint64 {
	if x != nil {
		return x.FirstTxTime
	}
	return 0
}

func (x *KanbanSummaryResponse) GetTotalTxNum() uint64 {
	if x != nil {
		return x.TotalTxNum
	}
	return 0
}

func (x *KanbanSummaryResponse) GetTotalTxAmount() string {
	if x != nil {
		return x.TotalTxAmount
	}
	return ""
}

func (x *KanbanSummaryResponse) GetTotalContract() uint64 {
	if x != nil {
		return x.TotalContract
	}
	return 0
}

func (x *KanbanSummaryResponse) GetTotalTxInAmount() string {
	if x != nil {
		return x.TotalTxInAmount
	}
	return ""
}

func (x *KanbanSummaryResponse) GetTotalTxsRanks() []*KanbanRank {
	if x != nil {
		return x.TotalTxsRanks
	}
	return nil
}

func (x *KanbanSummaryResponse) GetTotalTxAmountRanks() []*KanbanRank {
	if x != nil {
		return x.TotalTxAmountRanks
	}
	return nil
}

func (x *KanbanSummaryResponse) GetTotalContractRanks() []*KanbanRank {
	if x != nil {
		return x.TotalContractRanks
	}
	return nil
}

func (x *KanbanSummaryResponse) GetTotalTxInAmountRanks() []*KanbanRank {
	if x != nil {
		return x.TotalTxInAmountRanks
	}
	return nil
}

func (x *KanbanSummaryResponse) GetTopPercents() *KanbanTopPercent {
	if x != nil {
		return x.TopPercents
	}
	return nil
}

type KanbanChartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainName string `protobuf:"bytes,1,opt,name=chainName,proto3" json:"chainName,omitempty"`
	Address   string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	StartTime uint64 `protobuf:"varint,3,opt,name=startTime,proto3" json:"startTime,omitempty"` // UTC
	EndTime   uint64 `protobuf:"varint,4,opt,name=endTime,proto3" json:"endTime,omitempty"`     // UTC
	Uid       string `protobuf:"bytes,5,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *KanbanChartRequest) Reset() {
	*x = KanbanChartRequest{}
	mi := &file_builder_v1_transaction_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KanbanChartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KanbanChartRequest) ProtoMessage() {}

func (x *KanbanChartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KanbanChartRequest.ProtoReflect.Descriptor instead.
func (*KanbanChartRequest) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{69}
}

func (x *KanbanChartRequest) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *KanbanChartRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *KanbanChartRequest) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *KanbanChartRequest) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *KanbanChartRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type KanbanBar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time  uint64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"` // UTC
	Value uint64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KanbanBar) Reset() {
	*x = KanbanBar{}
	mi := &file_builder_v1_transaction_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KanbanBar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KanbanBar) ProtoMessage() {}

func (x *KanbanBar) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KanbanBar.ProtoReflect.Descriptor instead.
func (*KanbanBar) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{70}
}

func (x *KanbanBar) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *KanbanBar) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type KanbanChartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumsByDay       []*KanbanBar `protobuf:"bytes,1,rep,name=numsByDay,proto3" json:"numsByDay,omitempty"`
	AccumulatedNums []*KanbanBar `protobuf:"bytes,2,rep,name=accumulatedNums,proto3" json:"accumulatedNums,omitempty"`
}

func (x *KanbanChartResponse) Reset() {
	*x = KanbanChartResponse{}
	mi := &file_builder_v1_transaction_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KanbanChartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KanbanChartResponse) ProtoMessage() {}

func (x *KanbanChartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KanbanChartResponse.ProtoReflect.Descriptor instead.
func (*KanbanChartResponse) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{71}
}

func (x *KanbanChartResponse) GetNumsByDay() []*KanbanBar {
	if x != nil {
		return x.NumsByDay
	}
	return nil
}

func (x *KanbanChartResponse) GetAccumulatedNums() []*KanbanBar {
	if x != nil {
		return x.AccumulatedNums
	}
	return nil
}

type GetBlockHeightReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainName string `protobuf:"bytes,1,opt,name=chainName,proto3" json:"chainName,omitempty"`
}

func (x *GetBlockHeightReq) Reset() {
	*x = GetBlockHeightReq{}
	mi := &file_builder_v1_transaction_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockHeightReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockHeightReq) ProtoMessage() {}

func (x *GetBlockHeightReq) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockHeightReq.ProtoReflect.Descriptor instead.
func (*GetBlockHeightReq) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{72}
}

func (x *GetBlockHeightReq) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

type GetBlockHeightResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height int64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *GetBlockHeightResponse) Reset() {
	*x = GetBlockHeightResponse{}
	mi := &file_builder_v1_transaction_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockHeightResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockHeightResponse) ProtoMessage() {}

func (x *GetBlockHeightResponse) ProtoReflect() protoreflect.Message {
	mi := &file_builder_v1_transaction_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockHeightResponse.ProtoReflect.Descriptor instead.
func (*GetBlockHeightResponse) Descriptor() ([]byte, []int) {
	return file_builder_v1_transaction_proto_rawDescGZIP(), []int{73}
}

func (x *GetBlockHeightResponse) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

var File_builder_v1_transaction_proto protoreflect.FileDescriptor

var file_builder_v1_transaction_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12,
	0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x93, 0x01, 0x0a, 0x07,
	0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x19, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x22, 0x56, 0x0a, 0x0c, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f,
	0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x70, 0x0a, 0x0c, 0x4e, 0x66, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x11, 0x4e,
	0x66, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b,
	0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x66, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd8, 0x01, 0x0a, 0x0e, 0x4e, 0x66, 0x74,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x66,
	0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x78, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x61, 0x73, 0x68, 0x22, 0xb6, 0x01, 0x0a, 0x0a, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x78,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xe0, 0x01, 0x0a,
	0x0f, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b,
	0x12, 0x39, 0x0a, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x75,
	0x74, 0x78, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x08, 0x75, 0x74, 0x78, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0xaf, 0x02, 0x0a, 0x0b, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x75,
	0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x75, 0x6e,
	0x73, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74,
	0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0xd8, 0x01, 0x0a, 0x08, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38,
	0x0a, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08,
	0x6f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x6f, 0x63, 0x6b,
	0x52, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x6f,
	0x63, 0x6b, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x38, 0x0a, 0x08,
	0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x78, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x56, 0x0a, 0x08, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x6f,
	0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x8b,
	0x03, 0x0a, 0x0f, 0x44, 0x61, 0x70, 0x70, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x75, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x75, 0x69, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x31, 0x0a, 0x0d, 0x64, 0x61,
	0x74, 0x61, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x1a, 0x06, 0x30, 0x00, 0x30, 0x01, 0x30, 0x02, 0x52, 0x0d,
	0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x70, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x70, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1c,
	0x0a, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x58, 0x0a, 0x10,
	0x44, 0x61, 0x70, 0x70, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b,
	0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x70, 0x70, 0x50, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x89, 0x01, 0x0a, 0x0c, 0x44, 0x61, 0x70, 0x70, 0x50,
	0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x54, 0x0a, 0x08, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x25,
	0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x31, 0x0a, 0x09, 0x4e, 0x6f, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x0d,
	0x4f, 0x70, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x57, 0x0a,
	0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e,
	0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x36,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5e, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x69, 0x73, 0x6b,
	0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x69, 0x73, 0x6b, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75,
	0x72, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x70, 0x70,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x61, 0x70,
	0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9f, 0x02, 0x0a, 0x0b, 0x44, 0x61, 0x70, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x69, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x73,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f,
	0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x50, 0x0a, 0x0c, 0x44, 0x61, 0x70, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x70, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd6, 0x03, 0x0a, 0x08, 0x44,
	0x61, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73,
	0x74, 0x54, 0x78, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c,
	0x61, 0x73, 0x74, 0x54, 0x78, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x61, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x61, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x61, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x61, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c,
	0x6f, 0x67, 0x6f, 0x22, 0x4e, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x65, 0x73, 0x22, 0xd0, 0x09, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x31, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x78, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x67, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61,
	0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61,
	0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x73, 0x65, 0x46, 0x65,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x46, 0x65, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x70, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x70, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x72, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65,
	0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65,
	0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x61, 0x73,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x46, 0x65, 0x65, 0x50, 0x65,
	0x72, 0x47, 0x61, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x61, 0x73, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x46,
	0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x61, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x65, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x65, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x47, 0x61, 0x73, 0x6c, 0x65, 0x73, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x47, 0x61, 0x73, 0x6c, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x48, 0x6f, 0x73,
	0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x48, 0x6f,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x22, 0x89, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x22, 0xa5, 0x08, 0x0a, 0x0f, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x55, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x55, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74,
	0x49, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a,
	0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52,
	0x08, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x12, 0x31, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x1a,
	0x06, 0x30, 0x00, 0x30, 0x01, 0x30, 0x02, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22,
	0x02, 0x28, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x21, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x12, 0x23, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x73, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x73,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x18, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x00, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x70, 0x61, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x63, 0x0a, 0x10, 0x50, 0x61,
	0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0xd6, 0x0b, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x20, 0x0a,
	0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x55, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x55, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x65, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x74, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x73,
	0x55, 0x73, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x73, 0x55,
	0x73, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x61, 0x73, 0x65, 0x46, 0x65, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x46, 0x65, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78,
	0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x61, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6d, 0x61, 0x78, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x61, 0x73, 0x12, 0x32, 0x0a,
	0x14, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x50,
	0x65, 0x72, 0x47, 0x61, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x61, 0x78,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x61,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x70, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x70, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x61, 0x72, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x72, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6e,
	0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e,
	0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x66, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x48, 0x61, 0x73, 0x68, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x12, 0x53, 0x0a, 0x11, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x25,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x11, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x47, 0x61, 0x73, 0x6c, 0x65, 0x73, 0x73, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x47, 0x61, 0x73, 0x6c, 0x65,
	0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f,
	0x12, 0x24, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f,
	0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe8, 0x01, 0x0a, 0x0d, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x55, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x55, 0x69,
	0x64, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x74,
	0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x28, 0x0a, 0x0e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb6, 0x04,
	0x0a, 0x14, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x2b, 0x0a, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x1a, 0x06, 0x30, 0x00, 0x30, 0x01, 0x30,
	0x02, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x31, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b,
	0xfa, 0x42, 0x08, 0x1a, 0x06, 0x30, 0x00, 0x30, 0x01, 0x30, 0x02, 0x52, 0x0d, 0x64, 0x61, 0x74,
	0x61, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x07, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x23, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28,
	0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x1a, 0x06, 0x30, 0x00, 0x30,
	0x01, 0x30, 0x02, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36,
	0x0a, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x4d, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x61, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x6f,
	0x72, 0x65, 0x54, 0x68, 0x61, 0x6e, 0x22, 0x96, 0x01, 0x0a, 0x15, 0x50, 0x61, 0x67, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0xf7, 0x03, 0x0a, 0x0d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x26, 0x0a,
	0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x72, 0x69, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x72, 0x69, 0x12, 0x24, 0x0a,
	0x0d, 0x69, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x6f, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x79, 0x6e, 0x63, 0x54, 0x6f, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x54, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x79, 0x6e, 0x63,
	0x54, 0x6f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x0c, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4e, 0x0a, 0x13, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x37, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x4f, 0x0a, 0x0f, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x7d, 0x0a, 0x1d, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x44, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x22, 0x0a, 0x07, 0x75, 0x69, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01,
	0x02, 0x08, 0x01, 0x52, 0x07, 0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x64, 0x0a, 0x1e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x44, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x56, 0x0a, 0x1a, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x44, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x47, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x61, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x69, 0x64, 0x44, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x07, 0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x07, 0x75, 0x69, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x6c, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x61, 0x73, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x55, 0x69, 0x64, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x69, 0x64, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x52, 0x0a, 0x1e, 0x48, 0x61, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x69, 0x64,
	0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x61, 0x73, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x22, 0x66, 0x0a, 0x1f, 0x4c, 0x69,
	0x73, 0x74, 0x48, 0x61, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x61, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x55, 0x0a, 0x1b, 0x48, 0x61, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x61, 0x73,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68,
	0x61, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x13, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x25, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22,
	0x02, 0x20, 0x00, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x6c, 0x0a,
	0x22, 0x41, 0x73, 0x73, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x75, 0x6e,
	0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x1e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x75, 0x6e, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6e, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6e, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x75, 0x73, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x64, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x74,
	0x63, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x74, 0x63, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x72, 0x0a, 0x25, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x49, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x59, 0x0a, 0x21,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x64, 0x74, 0x22, 0xfa, 0x04, 0x0a, 0x17, 0x50, 0x61, 0x67, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x66, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x2b, 0x0a, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x1a, 0x06, 0x30, 0x00, 0x30, 0x01, 0x30, 0x02,
	0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69,
	0x6b, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x31, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xfa,
	0x42, 0x08, 0x1a, 0x06, 0x30, 0x00, 0x30, 0x01, 0x30, 0x02, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x21, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x07, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x23, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x42, 0x0a, 0x1c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x73, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x43, 0x61, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x6b, 0x65,
	0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x73, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x43, 0x61, 0x73, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x23, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x66, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x43, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x66, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xc5, 0x02, 0x0a, 0x1b,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x66, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x55, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x55, 0x72, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x22, 0x76, 0x0a, 0x1e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x66, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3e, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x66, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xcc, 0x04, 0x0a, 0x16,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x66, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x72, 0x69,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x72, 0x69,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x55, 0x72, 0x69, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x55, 0x72, 0x69, 0x12, 0x28, 0x0a, 0x0f,
	0x69, 0x74, 0x65, 0x6d, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x72, 0x69, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x74, 0x65, 0x6d, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x55, 0x72, 0x69, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x74, 0x65, 0x6d, 0x41, 0x6e,
	0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x69, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x69, 0x74, 0x65, 0x6d, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x72, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0xab, 0x01, 0x0a, 0x0f, 0x4e,
	0x66, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25,
	0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x12, 0x4e, 0x66, 0x74, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xaa, 0x03, 0x0a, 0x18, 0x50, 0x61, 0x67,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x11,
	0x66, 0x75, 0x6e, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28,
	0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x08,
	0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x31, 0x0a, 0x0d, 0x64,
	0x61, 0x74, 0x61, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x1a, 0x06, 0x30, 0x00, 0x30, 0x01, 0x30, 0x02, 0x52,
	0x0d, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28,
	0x00, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x23, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x6c, 0x0a, 0x19, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0x91, 0x03, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x66,
	0x75, 0x6e, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a,
	0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6e, 0x79, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6e, 0x79, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x64, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x64, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0xae, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x11, 0x66, 0x75, 0x6e, 0x64, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x08,
	0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x54, 0x0a, 0x16, 0x46, 0x75, 0x6e, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xd0,
	0x01, 0x0a, 0x12, 0x46, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x75,
	0x6e, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6e, 0x79, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6e, 0x79, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x64,
	0x74, 0x22, 0x50, 0x0a, 0x14, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e,
	0x64, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0xee, 0x01, 0x0a, 0x10, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x64,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6e, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6e, 0x79, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x72, 0x61, 0x74, 0x65, 0x22, 0x60, 0x0a, 0x14, 0x4b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x4c, 0x0a, 0x0a, 0x4b, 0x61, 0x6e, 0x62, 0x61, 0x6e,
	0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x70, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x22, 0xa2, 0x01, 0x0a, 0x10, 0x4b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x54,
	0x6f, 0x70, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x54, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x54, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x78, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x54, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x78, 0x49, 0x6e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54,
	0x78, 0x49, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe6, 0x04, 0x0a, 0x15, 0x4b, 0x61,
	0x6e, 0x62, 0x61, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x78, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54,
	0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x78,
	0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x54, 0x78, 0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x78,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x54, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x78, 0x49, 0x6e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x54, 0x78, 0x49, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x54, 0x78, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x52, 0x61,
	0x6e, 0x6b, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x78, 0x73, 0x52, 0x61, 0x6e, 0x6b,
	0x73, 0x12, 0x4e, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x78, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x12, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x54, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b,
	0x73, 0x12, 0x4e, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x12, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x61, 0x6e, 0x6b,
	0x73, 0x12, 0x52, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x78, 0x49, 0x6e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x52,
	0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x78, 0x49, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0x4b, 0x0a, 0x0b, 0x74, 0x6f, 0x70, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x54, 0x6f, 0x70, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x0b, 0x74, 0x6f, 0x70, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x88,
	0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x6f, 0x70, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x12, 0x4b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x35, 0x0a, 0x09, 0x4b,
	0x61, 0x6e, 0x62, 0x61, 0x6e, 0x42, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x13, 0x4b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x6e, 0x75,
	0x6d, 0x73, 0x42, 0x79, 0x44, 0x61, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x42, 0x61, 0x72, 0x52, 0x09, 0x6e, 0x75,
	0x6d, 0x73, 0x42, 0x79, 0x44, 0x61, 0x79, 0x12, 0x47, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x75, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x42, 0x61, 0x72, 0x52,
	0x0f, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x73,
	0x22, 0x31, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x30, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x32, 0x81, 0x1a, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12,
	0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x56, 0x0a, 0x09, 0x50, 0x61, 0x67, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x55, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x70, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x61, 0x70, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x61, 0x70, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x58, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x6d, 0x6f,
	0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x47, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x6e,
	0x63, 0x65, 0x12, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x60, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x61, 0x70, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x70, 0x70,
	0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x61, 0x70, 0x70, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x6c, 0x0a, 0x15, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x64, 0x0a, 0x0d, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x12, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x28, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6a, 0x0a, 0x13, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x55,
	0x69, 0x64, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x55, 0x69, 0x64, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x61, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x69, 0x64, 0x44, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x61, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x69, 0x64, 0x44, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x61, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x55, 0x69, 0x64, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x61, 0x73,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x61, 0x73, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x61,
	0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x16, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x75,
	0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a, 0x19, 0x41, 0x73, 0x73, 0x65, 0x74, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x1b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x66, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x66, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x66, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x16, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x66, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x66, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x66, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4e, 0x66, 0x74,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x66, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x66, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x11, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x46, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x46, 0x75, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e,
	0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x46, 0x75, 0x6e, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x54, 0x78, 0x12, 0x1e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x57, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4e, 0x66, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x66, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x66, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x07, 0x4a, 0x73,
	0x6f, 0x6e, 0x52, 0x70, 0x63, 0x12, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x1a, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x0d, 0x4b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x6e, 0x62, 0x61,
	0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x0d, 0x4b, 0x61,
	0x6e, 0x62, 0x61, 0x6e, 0x54, 0x78, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x26, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x13,
	0x4b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x34, 0x0a, 0x12, 0x61, 0x70, 0x69,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x50,
	0x01, 0x5a, 0x1c, 0x74, 0x78, 0x2d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_builder_v1_transaction_proto_rawDescOnce sync.Once
	file_builder_v1_transaction_proto_rawDescData = file_builder_v1_transaction_proto_rawDesc
)

func file_builder_v1_transaction_proto_rawDescGZIP() []byte {
	file_builder_v1_transaction_proto_rawDescOnce.Do(func() {
		file_builder_v1_transaction_proto_rawDescData = protoimpl.X.CompressGZIP(file_builder_v1_transaction_proto_rawDescData)
	})
	return file_builder_v1_transaction_proto_rawDescData
}

var file_builder_v1_transaction_proto_msgTypes = make([]protoimpl.MessageInfo, 74)
var file_builder_v1_transaction_proto_goTypes = []any{
	(*JsonReq)(nil),                               // 0: api.transaction.v1.JsonReq
	(*JsonResponse)(nil),                          // 1: api.transaction.v1.JsonResponse
	(*NftRecordReq)(nil),                          // 2: api.transaction.v1.NftRecordReq
	(*NftRecordResponse)(nil),                     // 3: api.transaction.v1.NftRecordResponse
	(*NftHistoryList)(nil),                        // 4: api.transaction.v1.NftHistoryList
	(*UnspentReq)(nil),                            // 5: api.transaction.v1.UnspentReq
	(*UnspentResponse)(nil),                       // 6: api.transaction.v1.UnspentResponse
	(*UnspentList)(nil),                           // 7: api.transaction.v1.UnspentList
	(*CellList)(nil),                              // 8: api.transaction.v1.CellList
	(*OutPoint)(nil),                              // 9: api.transaction.v1.OutPoint
	(*CellLock)(nil),                              // 10: api.transaction.v1.CellLock
	(*DappPageListReq)(nil),                       // 11: api.transaction.v1.DappPageListReq
	(*DappPageListResp)(nil),                      // 12: api.transaction.v1.DappPageListResp
	(*DappPageData)(nil),                          // 13: api.transaction.v1.DappPageData
	(*NonceReq)(nil),                              // 14: api.transaction.v1.NonceReq
	(*NonceResp)(nil),                             // 15: api.transaction.v1.NonceResp
	(*OpenAmountReq)(nil),                         // 16: api.transaction.v1.OpenAmountReq
	(*OpenAmoutResp)(nil),                         // 17: api.transaction.v1.OpenAmoutResp
	(*OpenAmountInfo)(nil),                        // 18: api.transaction.v1.OpenAmountInfo
	(*DappListReq)(nil),                           // 19: api.transaction.v1.DappListReq
	(*DappListResp)(nil),                          // 20: api.transaction.v1.DappListResp
	(*DappInfo)(nil),                              // 21: api.transaction.v1.DappInfo
	(*CreateResponse)(nil),                        // 22: api.transaction.v1.CreateResponse
	(*TransactionReq)(nil),                        // 23: api.transaction.v1.TransactionReq
	(*GetTransactionByHashRequest)(nil),           // 24: api.transaction.v1.GetTransactionByHashRequest
	(*PageListRequest)(nil),                       // 25: api.transaction.v1.PageListRequest
	(*PageListResponse)(nil),                      // 26: api.transaction.v1.PageListResponse
	(*TransactionRecord)(nil),                     // 27: api.transaction.v1.TransactionRecord
	(*AmountRequest)(nil),                         // 28: api.transaction.v1.AmountRequest
	(*AmountResponse)(nil),                        // 29: api.transaction.v1.AmountResponse
	(*PageListAssetRequest)(nil),                  // 30: api.transaction.v1.PageListAssetRequest
	(*PageListAssetResponse)(nil),                 // 31: api.transaction.v1.PageListAssetResponse
	(*AssetResponse)(nil),                         // 32: api.transaction.v1.AssetResponse
	(*AssetRequest)(nil),                          // 33: api.transaction.v1.AssetRequest
	(*ListBalanceResponse)(nil),                   // 34: api.transaction.v1.ListBalanceResponse
	(*BalanceResponse)(nil),                       // 35: api.transaction.v1.BalanceResponse
	(*ListAmountUidDimensionRequest)(nil),         // 36: api.transaction.v1.ListAmountUidDimensionRequest
	(*ListAmountUidDimensionResponse)(nil),        // 37: api.transaction.v1.ListAmountUidDimensionResponse
	(*AmountUidDimensionResponse)(nil),            // 38: api.transaction.v1.AmountUidDimensionResponse
	(*ListHasBalanceUidDimensionRequest)(nil),     // 39: api.transaction.v1.ListHasBalanceUidDimensionRequest
	(*ListHasBalanceUidDimensionResponse)(nil),    // 40: api.transaction.v1.ListHasBalanceUidDimensionResponse
	(*HasBalanceUidDimensionResponse)(nil),        // 41: api.transaction.v1.HasBalanceUidDimensionResponse
	(*ListHasBalanceDimensionRequest)(nil),        // 42: api.transaction.v1.ListHasBalanceDimensionRequest
	(*ListHasBalanceDimensionResponse)(nil),       // 43: api.transaction.v1.ListHasBalanceDimensionResponse
	(*HasBalanceDimensionResponse)(nil),           // 44: api.transaction.v1.HasBalanceDimensionResponse
	(*AssetHistoryRequest)(nil),                   // 45: api.transaction.v1.AssetHistoryRequest
	(*AssetHistoryFundAmountListResponse)(nil),    // 46: api.transaction.v1.AssetHistoryFundAmountListResponse
	(*AssetHistoryFundAmountResponse)(nil),        // 47: api.transaction.v1.AssetHistoryFundAmountResponse
	(*AssetHistoryAddressAmountListResponse)(nil), // 48: api.transaction.v1.AssetHistoryAddressAmountListResponse
	(*AssetHistoryAddressAmountResponse)(nil),     // 49: api.transaction.v1.AssetHistoryAddressAmountResponse
	(*PageListNftAssetRequest)(nil),               // 50: api.transaction.v1.PageListNftAssetRequest
	(*ClientPageListNftAssetGroupResponse)(nil),   // 51: api.transaction.v1.ClientPageListNftAssetGroupResponse
	(*ClientNftAssetGroupResponse)(nil),           // 52: api.transaction.v1.ClientNftAssetGroupResponse
	(*ClientPageListNftAssetResponse)(nil),        // 53: api.transaction.v1.ClientPageListNftAssetResponse
	(*ClientNftAssetResponse)(nil),                // 54: api.transaction.v1.ClientNftAssetResponse
	(*NftAssetRequest)(nil),                       // 55: api.transaction.v1.NftAssetRequest
	(*NftBalanceResponse)(nil),                    // 56: api.transaction.v1.NftBalanceResponse
	(*PageListStatisticRequest)(nil),              // 57: api.transaction.v1.PageListStatisticRequest
	(*PageListStatisticResponse)(nil),             // 58: api.transaction.v1.PageListStatisticResponse
	(*StatisticResponse)(nil),                     // 59: api.transaction.v1.StatisticResponse
	(*StatisticFundRequest)(nil),                  // 60: api.transaction.v1.StatisticFundRequest
	(*FundAmountListResponse)(nil),                // 61: api.transaction.v1.FundAmountListResponse
	(*FundAmountResponse)(nil),                    // 62: api.transaction.v1.FundAmountResponse
	(*FundRateListResponse)(nil),                  // 63: api.transaction.v1.FundRateListResponse
	(*FundRateResponse)(nil),                      // 64: api.transaction.v1.FundRateResponse
	(*KanbanSummaryRequest)(nil),                  // 65: api.transaction.v1.KanbanSummaryRequest
	(*KanbanRank)(nil),                            // 66: api.transaction.v1.KanbanRank
	(*KanbanTopPercent)(nil),                      // 67: api.transaction.v1.KanbanTopPercent
	(*KanbanSummaryResponse)(nil),                 // 68: api.transaction.v1.KanbanSummaryResponse
	(*KanbanChartRequest)(nil),                    // 69: api.transaction.v1.KanbanChartRequest
	(*KanbanBar)(nil),                             // 70: api.transaction.v1.KanbanBar
	(*KanbanChartResponse)(nil),                   // 71: api.transaction.v1.KanbanChartResponse
	(*GetBlockHeightReq)(nil),                     // 72: api.transaction.v1.GetBlockHeightReq
	(*GetBlockHeightResponse)(nil),                // 73: api.transaction.v1.GetBlockHeightResponse
}
var file_builder_v1_transaction_proto_depIdxs = []int32{
	4,  // 0: api.transaction.v1.NftRecordResponse.data:type_name -> api.transaction.v1.NftHistoryList
	8,  // 1: api.transaction.v1.UnspentResponse.cell_list:type_name -> api.transaction.v1.CellList
	7,  // 2: api.transaction.v1.UnspentResponse.utxo_list:type_name -> api.transaction.v1.UnspentList
	8,  // 3: api.transaction.v1.UnspentResponse.token_cell_list:type_name -> api.transaction.v1.CellList
	9,  // 4: api.transaction.v1.CellList.outPoint:type_name -> api.transaction.v1.OutPoint
	10, // 5: api.transaction.v1.CellList.lock:type_name -> api.transaction.v1.CellLock
	10, // 6: api.transaction.v1.CellList.type:type_name -> api.transaction.v1.CellLock
	13, // 7: api.transaction.v1.DappPageListResp.data:type_name -> api.transaction.v1.DappPageData
	27, // 8: api.transaction.v1.DappPageData.data:type_name -> api.transaction.v1.TransactionRecord
	18, // 9: api.transaction.v1.OpenAmoutResp.data:type_name -> api.transaction.v1.OpenAmountInfo
	21, // 10: api.transaction.v1.DappListResp.data:type_name -> api.transaction.v1.DappInfo
	27, // 11: api.transaction.v1.PageListResponse.list:type_name -> api.transaction.v1.TransactionRecord
	27, // 12: api.transaction.v1.TransactionRecord.operateRecordList:type_name -> api.transaction.v1.TransactionRecord
	32, // 13: api.transaction.v1.PageListAssetResponse.list:type_name -> api.transaction.v1.AssetResponse
	35, // 14: api.transaction.v1.ListBalanceResponse.list:type_name -> api.transaction.v1.BalanceResponse
	38, // 15: api.transaction.v1.ListAmountUidDimensionResponse.list:type_name -> api.transaction.v1.AmountUidDimensionResponse
	41, // 16: api.transaction.v1.ListHasBalanceUidDimensionResponse.list:type_name -> api.transaction.v1.HasBalanceUidDimensionResponse
	44, // 17: api.transaction.v1.ListHasBalanceDimensionResponse.list:type_name -> api.transaction.v1.HasBalanceDimensionResponse
	47, // 18: api.transaction.v1.AssetHistoryFundAmountListResponse.list:type_name -> api.transaction.v1.AssetHistoryFundAmountResponse
	49, // 19: api.transaction.v1.AssetHistoryAddressAmountListResponse.list:type_name -> api.transaction.v1.AssetHistoryAddressAmountResponse
	52, // 20: api.transaction.v1.ClientPageListNftAssetGroupResponse.list:type_name -> api.transaction.v1.ClientNftAssetGroupResponse
	54, // 21: api.transaction.v1.ClientPageListNftAssetResponse.list:type_name -> api.transaction.v1.ClientNftAssetResponse
	59, // 22: api.transaction.v1.PageListStatisticResponse.list:type_name -> api.transaction.v1.StatisticResponse
	62, // 23: api.transaction.v1.FundAmountListResponse.list:type_name -> api.transaction.v1.FundAmountResponse
	64, // 24: api.transaction.v1.FundRateListResponse.list:type_name -> api.transaction.v1.FundRateResponse
	66, // 25: api.transaction.v1.KanbanSummaryResponse.totalTxsRanks:type_name -> api.transaction.v1.KanbanRank
	66, // 26: api.transaction.v1.KanbanSummaryResponse.totalTxAmountRanks:type_name -> api.transaction.v1.KanbanRank
	66, // 27: api.transaction.v1.KanbanSummaryResponse.totalContractRanks:type_name -> api.transaction.v1.KanbanRank
	66, // 28: api.transaction.v1.KanbanSummaryResponse.totalTxInAmountRanks:type_name -> api.transaction.v1.KanbanRank
	67, // 29: api.transaction.v1.KanbanSummaryResponse.topPercents:type_name -> api.transaction.v1.KanbanTopPercent
	70, // 30: api.transaction.v1.KanbanChartResponse.numsByDay:type_name -> api.transaction.v1.KanbanBar
	70, // 31: api.transaction.v1.KanbanChartResponse.accumulatedNums:type_name -> api.transaction.v1.KanbanBar
	23, // 32: api.transaction.v1.Transaction.CreateRecordFromWallet:input_type -> api.transaction.v1.TransactionReq
	24, // 33: api.transaction.v1.Transaction.GetTransactionByHash:input_type -> api.transaction.v1.GetTransactionByHashRequest
	25, // 34: api.transaction.v1.Transaction.PageLists:input_type -> api.transaction.v1.PageListRequest
	25, // 35: api.transaction.v1.Transaction.PageList:input_type -> api.transaction.v1.PageListRequest
	28, // 36: api.transaction.v1.Transaction.GetAmount:input_type -> api.transaction.v1.AmountRequest
	19, // 37: api.transaction.v1.Transaction.GetDappList:input_type -> api.transaction.v1.DappListReq
	16, // 38: api.transaction.v1.Transaction.GetAllOpenAmount:input_type -> api.transaction.v1.OpenAmountReq
	14, // 39: api.transaction.v1.Transaction.GetNonce:input_type -> api.transaction.v1.NonceReq
	11, // 40: api.transaction.v1.Transaction.GetDappListPageList:input_type -> api.transaction.v1.DappPageListReq
	30, // 41: api.transaction.v1.Transaction.PageListAssetCurrency:input_type -> api.transaction.v1.PageListAssetRequest
	30, // 42: api.transaction.v1.Transaction.PageListAsset:input_type -> api.transaction.v1.PageListAssetRequest
	30, // 43: api.transaction.v1.Transaction.PageListAssetGroup:input_type -> api.transaction.v1.PageListAssetRequest
	30, // 44: api.transaction.v1.Transaction.ClientPageListAsset:input_type -> api.transaction.v1.PageListAssetRequest
	33, // 45: api.transaction.v1.Transaction.GetBalance:input_type -> api.transaction.v1.AssetRequest
	36, // 46: api.transaction.v1.Transaction.ListAmountUidDimension:input_type -> api.transaction.v1.ListAmountUidDimensionRequest
	39, // 47: api.transaction.v1.Transaction.ListHasBalanceUidDimension:input_type -> api.transaction.v1.ListHasBalanceUidDimensionRequest
	42, // 48: api.transaction.v1.Transaction.ListHasBalanceDimension:input_type -> api.transaction.v1.ListHasBalanceDimensionRequest
	45, // 49: api.transaction.v1.Transaction.AssetHistoryFundAmount:input_type -> api.transaction.v1.AssetHistoryRequest
	45, // 50: api.transaction.v1.Transaction.AssetHistoryAddressAmount:input_type -> api.transaction.v1.AssetHistoryRequest
	50, // 51: api.transaction.v1.Transaction.ClientPageListNftAssetGroup:input_type -> api.transaction.v1.PageListNftAssetRequest
	50, // 52: api.transaction.v1.Transaction.ClientPageListNftAsset:input_type -> api.transaction.v1.PageListNftAssetRequest
	55, // 53: api.transaction.v1.Transaction.GetNftBalance:input_type -> api.transaction.v1.NftAssetRequest
	57, // 54: api.transaction.v1.Transaction.PageListStatistic:input_type -> api.transaction.v1.PageListStatisticRequest
	60, // 55: api.transaction.v1.Transaction.StatisticFundAmount:input_type -> api.transaction.v1.StatisticFundRequest
	60, // 56: api.transaction.v1.Transaction.StatisticFundRate:input_type -> api.transaction.v1.StatisticFundRequest
	5,  // 57: api.transaction.v1.Transaction.GetUnspentTx:input_type -> api.transaction.v1.UnspentReq
	2,  // 58: api.transaction.v1.Transaction.GetNftRecord:input_type -> api.transaction.v1.NftRecordReq
	0,  // 59: api.transaction.v1.Transaction.JsonRpc:input_type -> api.transaction.v1.JsonReq
	65, // 60: api.transaction.v1.Transaction.KanbanSummary:input_type -> api.transaction.v1.KanbanSummaryRequest
	69, // 61: api.transaction.v1.Transaction.KanbanTxChart:input_type -> api.transaction.v1.KanbanChartRequest
	69, // 62: api.transaction.v1.Transaction.KanbanContractChart:input_type -> api.transaction.v1.KanbanChartRequest
	72, // 63: api.transaction.v1.Transaction.GetBlockHeight:input_type -> api.transaction.v1.GetBlockHeightReq
	22, // 64: api.transaction.v1.Transaction.CreateRecordFromWallet:output_type -> api.transaction.v1.CreateResponse
	27, // 65: api.transaction.v1.Transaction.GetTransactionByHash:output_type -> api.transaction.v1.TransactionRecord
	26, // 66: api.transaction.v1.Transaction.PageLists:output_type -> api.transaction.v1.PageListResponse
	26, // 67: api.transaction.v1.Transaction.PageList:output_type -> api.transaction.v1.PageListResponse
	29, // 68: api.transaction.v1.Transaction.GetAmount:output_type -> api.transaction.v1.AmountResponse
	20, // 69: api.transaction.v1.Transaction.GetDappList:output_type -> api.transaction.v1.DappListResp
	17, // 70: api.transaction.v1.Transaction.GetAllOpenAmount:output_type -> api.transaction.v1.OpenAmoutResp
	15, // 71: api.transaction.v1.Transaction.GetNonce:output_type -> api.transaction.v1.NonceResp
	12, // 72: api.transaction.v1.Transaction.GetDappListPageList:output_type -> api.transaction.v1.DappPageListResp
	31, // 73: api.transaction.v1.Transaction.PageListAssetCurrency:output_type -> api.transaction.v1.PageListAssetResponse
	31, // 74: api.transaction.v1.Transaction.PageListAsset:output_type -> api.transaction.v1.PageListAssetResponse
	31, // 75: api.transaction.v1.Transaction.PageListAssetGroup:output_type -> api.transaction.v1.PageListAssetResponse
	31, // 76: api.transaction.v1.Transaction.ClientPageListAsset:output_type -> api.transaction.v1.PageListAssetResponse
	34, // 77: api.transaction.v1.Transaction.GetBalance:output_type -> api.transaction.v1.ListBalanceResponse
	37, // 78: api.transaction.v1.Transaction.ListAmountUidDimension:output_type -> api.transaction.v1.ListAmountUidDimensionResponse
	40, // 79: api.transaction.v1.Transaction.ListHasBalanceUidDimension:output_type -> api.transaction.v1.ListHasBalanceUidDimensionResponse
	43, // 80: api.transaction.v1.Transaction.ListHasBalanceDimension:output_type -> api.transaction.v1.ListHasBalanceDimensionResponse
	46, // 81: api.transaction.v1.Transaction.AssetHistoryFundAmount:output_type -> api.transaction.v1.AssetHistoryFundAmountListResponse
	48, // 82: api.transaction.v1.Transaction.AssetHistoryAddressAmount:output_type -> api.transaction.v1.AssetHistoryAddressAmountListResponse
	51, // 83: api.transaction.v1.Transaction.ClientPageListNftAssetGroup:output_type -> api.transaction.v1.ClientPageListNftAssetGroupResponse
	53, // 84: api.transaction.v1.Transaction.ClientPageListNftAsset:output_type -> api.transaction.v1.ClientPageListNftAssetResponse
	56, // 85: api.transaction.v1.Transaction.GetNftBalance:output_type -> api.transaction.v1.NftBalanceResponse
	58, // 86: api.transaction.v1.Transaction.PageListStatistic:output_type -> api.transaction.v1.PageListStatisticResponse
	61, // 87: api.transaction.v1.Transaction.StatisticFundAmount:output_type -> api.transaction.v1.FundAmountListResponse
	63, // 88: api.transaction.v1.Transaction.StatisticFundRate:output_type -> api.transaction.v1.FundRateListResponse
	6,  // 89: api.transaction.v1.Transaction.GetUnspentTx:output_type -> api.transaction.v1.UnspentResponse
	3,  // 90: api.transaction.v1.Transaction.GetNftRecord:output_type -> api.transaction.v1.NftRecordResponse
	1,  // 91: api.transaction.v1.Transaction.JsonRpc:output_type -> api.transaction.v1.JsonResponse
	68, // 92: api.transaction.v1.Transaction.KanbanSummary:output_type -> api.transaction.v1.KanbanSummaryResponse
	71, // 93: api.transaction.v1.Transaction.KanbanTxChart:output_type -> api.transaction.v1.KanbanChartResponse
	71, // 94: api.transaction.v1.Transaction.KanbanContractChart:output_type -> api.transaction.v1.KanbanChartResponse
	73, // 95: api.transaction.v1.Transaction.GetBlockHeight:output_type -> api.transaction.v1.GetBlockHeightResponse
	64, // [64:96] is the sub-list for method output_type
	32, // [32:64] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_builder_v1_transaction_proto_init() }
func file_builder_v1_transaction_proto_init() {
	if File_builder_v1_transaction_proto != nil {
		return
	}
	file_builder_v1_transaction_proto_msgTypes[25].OneofWrappers = []any{}
	file_builder_v1_transaction_proto_msgTypes[68].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_builder_v1_transaction_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   74,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_builder_v1_transaction_proto_goTypes,
		DependencyIndexes: file_builder_v1_transaction_proto_depIdxs,
		MessageInfos:      file_builder_v1_transaction_proto_msgTypes,
	}.Build()
	File_builder_v1_transaction_proto = out.File
	file_builder_v1_transaction_proto_rawDesc = nil
	file_builder_v1_transaction_proto_goTypes = nil
	file_builder_v1_transaction_proto_depIdxs = nil
}
